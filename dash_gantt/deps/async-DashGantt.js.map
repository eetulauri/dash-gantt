{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * DashGantt is a Gantt chart component for scheduling.\r\n * It displays professionals vertically and time horizontally.\r\n * Users can add, modify, and remove timeslots for each professional.\r\n * The component outputs data that can be used in a prediction model.\r\n */\r\nexport default class DashGantt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            },\r\n            hoveredCell: null\r\n        };\r\n        \r\n        // Bind methods\r\n        this.handleSlotClick = this.handleSlotClick.bind(this);\r\n        this.handleAddSlot = this.handleAddSlot.bind(this);\r\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\r\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\r\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\r\n        this.handleCellHover = this.handleCellHover.bind(this);\r\n        this.handleCellLeave = this.handleCellLeave.bind(this);\r\n    }\r\n    \r\n    // Handle clicking on a timeslot\r\n    handleSlotClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            isAddingSlot: false\r\n        });\r\n    }\r\n    \r\n    // Handle cell hover\r\n    handleCellHover(professionalId, hour) {\r\n        this.setState({\r\n            hoveredCell: { professionalId, hour }\r\n        });\r\n    }\r\n    \r\n    // Handle cell leave\r\n    handleCellLeave() {\r\n        this.setState({\r\n            hoveredCell: null\r\n        });\r\n    }\r\n    \r\n    // Handle adding a new timeslot\r\n    handleAddSlot(professionalId, hour) {\r\n        const { slotDuration } = this.props;\r\n        const startHour = Math.floor(hour);\r\n        const startMinutes = (hour - startHour) * 60;\r\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\r\n        const endHour = Math.floor(endTimeInMinutes / 60);\r\n        const endMinutes = endTimeInMinutes % 60;\r\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        this.setState({\r\n            isAddingSlot: true,\r\n            selectedSlot: null,\r\n            newSlot: {\r\n                professionalId,\r\n                start: startTime,\r\n                end: endTime\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle removing a timeslot\r\n    handleRemoveSlot(slotId) {\r\n        const { timeslots, setProps } = this.props;\r\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\r\n        \r\n        setProps({ timeslots: updatedTimeslots });\r\n        this.setState({ selectedSlot: null });\r\n    }\r\n    \r\n    // Handle saving a timeslot (new or edited)\r\n    handleSaveSlot() {\r\n        const { timeslots, date, setProps } = this.props;\r\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\r\n        \r\n        let updatedTimeslots;\r\n        \r\n        if (isAddingSlot) {\r\n            // Add new slot\r\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\r\n            const slotToAdd = {\r\n                id: newId,\r\n                professionalId: newSlot.professionalId,\r\n                start: newSlot.start,\r\n                end: newSlot.end,\r\n                date: date\r\n            };\r\n            \r\n            updatedTimeslots = [...timeslots, slotToAdd];\r\n        } else {\r\n            // Update existing slot\r\n            updatedTimeslots = timeslots.map(slot => \r\n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\r\n            );\r\n        }\r\n        \r\n        setProps({ timeslots: updatedTimeslots });\r\n        this.setState({\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle canceling edit or add operation\r\n    handleCancelEdit() {\r\n        this.setState({\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Convert time string to decimal hours\r\n    timeToDecimal(timeStr) {\r\n        const [hours, minutes] = timeStr.split(':').map(Number);\r\n        return hours + (minutes / 60);\r\n    }\r\n    \r\n    // Format decimal hours to time string\r\n    decimalToTime(decimal) {\r\n        const hours = Math.floor(decimal);\r\n        const minutes = Math.round((decimal - hours) * 60);\r\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    // Calculate position and width for a timeslot\r\n    calculateSlotStyle(slot, startHour, endHour) {\r\n        const slotStart = this.timeToDecimal(slot.start);\r\n        const slotEnd = this.timeToDecimal(slot.end);\r\n        \r\n        // Calculate position as percentage of the total width\r\n        const totalHours = endHour - startHour;\r\n        const left = ((slotStart - startHour) / totalHours) * 100;\r\n        const width = ((slotEnd - slotStart) / totalHours) * 100;\r\n        \r\n        return {\r\n            left: `${left}%`,\r\n            width: `${width}%`\r\n        };\r\n    }\r\n    \r\n    // Get color based on booking probability\r\n    getProbabilityColor(probability) {\r\n        if (probability === undefined) return '#4CAF50'; // Default green\r\n        \r\n        if (probability >= 0.7) return '#4CAF50'; // Green for high probability\r\n        if (probability >= 0.4) return '#FFC107'; // Yellow for medium probability\r\n        return '#F44336'; // Red for low probability\r\n    }\r\n    \r\n    // Render time header (hours)\r\n    renderTimeHeader() {\r\n        const { startHour, endHour } = this.props;\r\n        const hours = [];\r\n        \r\n        // Create hour markers for the time header\r\n        for (let hour = startHour; hour <= endHour; hour++) {\r\n            const displayHour = hour % 24; // Handle 24-hour format\r\n            const isPM = displayHour >= 12;\r\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\r\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\r\n            \r\n            hours.push(\r\n                <div key={`hour-${hour}`} className=\"dash-gantt-hour\">\r\n                    {timeLabel}\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <div className=\"dash-gantt-time-header\">\r\n                <div className=\"dash-gantt-empty-cell\"></div>\r\n                <div className=\"dash-gantt-hours\">\r\n                    {hours}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    // Render a professional row\r\n    renderProfessionalRow(professional) {\r\n        const { startHour, endHour, timeslots } = this.props;\r\n        const { hoveredCell } = this.state;\r\n        const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\r\n        \r\n        return (\r\n            <div key={`row-${professional.id}`} className=\"dash-gantt-row\">\r\n                <div className=\"dash-gantt-professional\">\r\n                    {professional.name}\r\n                </div>\r\n                <div className=\"dash-gantt-timeline\">\r\n                    {/* Render grid lines for each hour */}\r\n                    {Array.from({ length: endHour - startHour + 1 }, (_, i) => (\r\n                        <div \r\n                            key={`grid-${i}`} \r\n                            className=\"dash-gantt-grid-line\"\r\n                            onClick={() => this.handleAddSlot(professional.id, startHour + i)}\r\n                            onMouseEnter={() => this.handleCellHover(professional.id, startHour + i)}\r\n                            onMouseLeave={this.handleCellLeave}\r\n                            style={{\r\n                                backgroundColor: hoveredCell && \r\n                                                hoveredCell.professionalId === professional.id && \r\n                                                hoveredCell.hour === startHour + i ? \r\n                                                '#f0f0f0' : 'transparent'\r\n                            }}\r\n                        />\r\n                    ))}\r\n                    \r\n                    {/* Render timeslots */}\r\n                    {professionalSlots.map(slot => {\r\n                        const slotStyle = this.calculateSlotStyle(slot, startHour, endHour);\r\n                        const backgroundColor = this.getProbabilityColor(slot.bookingProbability);\r\n                        \r\n                        return (\r\n                            <div \r\n                                key={`slot-${slot.id}`} \r\n                                className=\"dash-gantt-slot\"\r\n                                style={{\r\n                                    ...slotStyle,\r\n                                    backgroundColor\r\n                                }}\r\n                                onClick={() => this.handleSlotClick(slot)}\r\n                            >\r\n                                <div className=\"dash-gantt-slot-time\">\r\n                                    {slot.start} - {slot.end}\r\n                                </div>\r\n                                {slot.bookingProbability !== undefined && (\r\n                                    <div className=\"dash-gantt-probability\">\r\n                                        {Math.round(slot.bookingProbability * 100)}%\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    // Render the slot editor\r\n    renderSlotEditor() {\r\n        const { professionals } = this.props;\r\n        const { selectedSlot, isAddingSlot, newSlot } = this.state;\r\n        \r\n        const slot = isAddingSlot ? newSlot : selectedSlot;\r\n        \r\n        if (!slot) return null;\r\n        \r\n        return (\r\n            <div className=\"dash-gantt-editor\">\r\n                <h3>{isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\r\n                <div className=\"dash-gantt-form\">\r\n                    <div className=\"dash-gantt-form-group\">\r\n                        <label>Professional:</label>\r\n                        <select \r\n                            value={slot.professionalId} \r\n                            onChange={e => {\r\n                                const updatedSlot = { ...slot, professionalId: parseInt(e.target.value) };\r\n                                if (isAddingSlot) {\r\n                                    this.setState({ newSlot: updatedSlot });\r\n                                } else {\r\n                                    this.setState({ selectedSlot: updatedSlot });\r\n                                }\r\n                            }}\r\n                            disabled={!isAddingSlot}\r\n                        >\r\n                            {professionals.map(p => (\r\n                                <option key={p.id} value={p.id}>{p.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"dash-gantt-form-group\">\r\n                        <label>Start Time:</label>\r\n                        <input \r\n                            type=\"time\" \r\n                            value={slot.start} \r\n                            onChange={e => {\r\n                                const updatedSlot = { ...slot, start: e.target.value };\r\n                                if (isAddingSlot) {\r\n                                    this.setState({ newSlot: updatedSlot });\r\n                                } else {\r\n                                    this.setState({ selectedSlot: updatedSlot });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"dash-gantt-form-group\">\r\n                        <label>End Time:</label>\r\n                        <input \r\n                            type=\"time\" \r\n                            value={slot.end} \r\n                            onChange={e => {\r\n                                const updatedSlot = { ...slot, end: e.target.value };\r\n                                if (isAddingSlot) {\r\n                                    this.setState({ newSlot: updatedSlot });\r\n                                } else {\r\n                                    this.setState({ selectedSlot: updatedSlot });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"dash-gantt-form-actions\">\r\n                        <button onClick={this.handleSaveSlot}>Save</button>\r\n                        <button onClick={this.handleCancelEdit}>Cancel</button>\r\n                        {!isAddingSlot && (\r\n                            <button onClick={() => this.handleRemoveSlot(selectedSlot.id)}>Remove</button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        const { id, professionals, date } = this.props;\r\n        \r\n        const styles = {\r\n            dashGantt: {\r\n                fontFamily: 'Arial, sans-serif',\r\n                margin: '20px 0'\r\n            },\r\n            dashGanttHeader: {\r\n                marginBottom: '10px'\r\n            },\r\n            dashGanttContainer: {\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px',\r\n                overflow: 'hidden'\r\n            },\r\n            dashGanttTimeHeader: {\r\n                display: 'flex',\r\n                borderBottom: '1px solid #ccc',\r\n                backgroundColor: '#f5f5f5'\r\n            },\r\n            dashGanttEmptyCell: {\r\n                width: '150px',\r\n                borderRight: '1px solid #ccc'\r\n            },\r\n            dashGanttHours: {\r\n                display: 'flex',\r\n                flex: 1\r\n            },\r\n            dashGanttHour: {\r\n                flex: 1,\r\n                padding: '8px',\r\n                textAlign: 'center',\r\n                fontWeight: 'bold',\r\n                borderRight: '1px solid #ccc'\r\n            },\r\n            dashGanttRow: {\r\n                display: 'flex',\r\n                borderBottom: '1px solid #ccc',\r\n                height: '60px'\r\n            },\r\n            dashGanttProfessional: {\r\n                width: '150px',\r\n                padding: '8px',\r\n                borderRight: '1px solid #ccc',\r\n                backgroundColor: '#f9f9f9',\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n            },\r\n            dashGanttTimeline: {\r\n                flex: 1,\r\n                position: 'relative',\r\n                display: 'flex'\r\n            },\r\n            dashGanttGridLine: {\r\n                flex: 1,\r\n                height: '100%',\r\n                borderRight: '1px solid #eee',\r\n                cursor: 'pointer'\r\n            },\r\n            dashGanttSlot: {\r\n                position: 'absolute',\r\n                top: '5px',\r\n                height: 'calc(100% - 10px)',\r\n                backgroundColor: '#4CAF50',\r\n                color: 'white',\r\n                borderRadius: '4px',\r\n                padding: '5px',\r\n                fontSize: '12px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                whiteSpace: 'nowrap',\r\n                zIndex: 10\r\n            },\r\n            dashGanttSlotHover: {\r\n                boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\r\n            },\r\n            dashGanttSlotTime: {\r\n                fontWeight: 'bold',\r\n                marginBottom: '2px'\r\n            },\r\n            dashGanttProbability: {\r\n                fontSize: '10px',\r\n                fontWeight: 'bold'\r\n            },\r\n            dashGanttEditor: {\r\n                marginTop: '20px',\r\n                padding: '15px',\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px',\r\n                backgroundColor: '#f9f9f9'\r\n            },\r\n            dashGanttForm: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: '10px'\r\n            },\r\n            dashGanttFormGroup: {\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n            },\r\n            dashGanttFormGroupLabel: {\r\n                width: '100px',\r\n                marginRight: '10px'\r\n            },\r\n            dashGanttFormGroupInput: {\r\n                flex: 1,\r\n                padding: '8px',\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px'\r\n            },\r\n            dashGanttFormActions: {\r\n                display: 'flex',\r\n                gap: '10px',\r\n                marginTop: '10px'\r\n            },\r\n            dashGanttFormActionsButton: {\r\n                padding: '8px 15px',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold'\r\n            },\r\n            dashGanttFormActionsSave: {\r\n                backgroundColor: '#4CAF50',\r\n                color: 'white'\r\n            },\r\n            dashGanttFormActionsCancel: {\r\n                backgroundColor: '#f5f5f5'\r\n            },\r\n            dashGanttFormActionsRemove: {\r\n                backgroundColor: '#f44336',\r\n                color: 'white'\r\n            }\r\n        };\r\n        \r\n        return (\r\n            <div id={id} style={styles.dashGantt}>\r\n                <div style={styles.dashGanttHeader}>\r\n                    <h2>Schedule for {date}</h2>\r\n                </div>\r\n                <div style={styles.dashGanttContainer}>\r\n                    <div style={styles.dashGanttTimeHeader}>\r\n                        <div style={styles.dashGanttEmptyCell}></div>\r\n                        <div style={styles.dashGanttHours}>\r\n                            {/* Create hour markers for the time header */}\r\n                            {Array.from({ length: this.props.endHour - this.props.startHour + 1 }, (_, i) => {\r\n                                const hour = this.props.startHour + i;\r\n                                const displayHour = hour % 24; // Handle 24-hour format\r\n                                const isPM = displayHour >= 12;\r\n                                const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\r\n                                const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\r\n                                \r\n                                return (\r\n                                    <div key={`hour-${hour}`} style={styles.dashGanttHour}>\r\n                                        {timeLabel}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        {professionals.map(professional => {\r\n                            const professionalSlots = this.props.timeslots.filter(slot => slot.professionalId === professional.id);\r\n                            \r\n                            return (\r\n                                <div key={`row-${professional.id}`} style={styles.dashGanttRow}>\r\n                                    <div style={styles.dashGanttProfessional}>\r\n                                        {professional.name}\r\n                                    </div>\r\n                                    <div style={styles.dashGanttTimeline}>\r\n                                        {/* Render grid lines for each hour */}\r\n                                        {Array.from({ length: this.props.endHour - this.props.startHour + 1 }, (_, i) => {\r\n                                            const hour = this.props.startHour + i;\r\n                                            const isHovered = this.state.hoveredCell && \r\n                                                            this.state.hoveredCell.professionalId === professional.id && \r\n                                                            this.state.hoveredCell.hour === hour;\r\n                                            \r\n                                            return (\r\n                                                <div \r\n                                                    key={`grid-${i}`} \r\n                                                    style={{\r\n                                                        ...styles.dashGanttGridLine,\r\n                                                        backgroundColor: isHovered ? '#f0f0f0' : 'transparent'\r\n                                                    }}\r\n                                                    onClick={() => this.handleAddSlot(professional.id, hour)}\r\n                                                    onMouseEnter={() => this.handleCellHover(professional.id, hour)}\r\n                                                    onMouseLeave={this.handleCellLeave}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                        \r\n                                        {/* Render timeslots */}\r\n                                        {professionalSlots.map(slot => {\r\n                                            const slotStyle = this.calculateSlotStyle(slot, this.props.startHour, this.props.endHour);\r\n                                            const backgroundColor = this.getProbabilityColor(slot.bookingProbability);\r\n                                            \r\n                                            return (\r\n                                                <div \r\n                                                    key={`slot-${slot.id}`} \r\n                                                    style={{\r\n                                                        ...styles.dashGanttSlot,\r\n                                                        left: slotStyle.left,\r\n                                                        width: slotStyle.width,\r\n                                                        backgroundColor\r\n                                                    }}\r\n                                                    onClick={() => this.handleSlotClick(slot)}\r\n                                                >\r\n                                                    <div style={styles.dashGanttSlotTime}>\r\n                                                        {slot.start} - {slot.end}\r\n                                                    </div>\r\n                                                    {slot.bookingProbability !== undefined && (\r\n                                                        <div style={styles.dashGanttProbability}>\r\n                                                            {Math.round(slot.bookingProbability * 100)}%\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                \r\n                {/* Render slot editor */}\r\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\r\n                    <div style={styles.dashGanttEditor}>\r\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\r\n                        <div style={styles.dashGanttForm}>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\r\n                                <select \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \r\n                                    onChange={e => {\r\n                                        const professionalId = parseInt(e.target.value);\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\r\n                                        }\r\n                                    }}\r\n                                    disabled={!this.state.isAddingSlot}\r\n                                >\r\n                                    {this.props.professionals.map(p => (\r\n                                        <option key={p.id} value={p.id}>{p.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \r\n                                    onChange={e => {\r\n                                        const start = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \r\n                                    onChange={e => {\r\n                                        const end = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormActions}>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\r\n                                    onClick={this.handleSaveSlot}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\r\n                                    onClick={this.handleCancelEdit}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                {!this.state.isAddingSlot && (\r\n                                    <button \r\n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\r\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\r\n                                    >\r\n                                        Remove\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDashGantt.defaultProps = {\r\n    timeslots: [],\r\n    date: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format\r\n    startHour: 6, // 6:00 AM\r\n    endHour: 24, // Midnight\r\n    slotDuration: 60, // 60 minutes\r\n};\r\n\r\nDashGantt.propTypes = {\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * List of professionals to display in the Gantt chart.\r\n     * Each professional should have an id and name.\r\n     */\r\n    professionals: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired,\r\n\r\n    /**\r\n     * List of timeslots to display in the Gantt chart.\r\n     * Each timeslot should have an id, professionalId, start time, end time, and date.\r\n     */\r\n    timeslots: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            professionalId: PropTypes.number.isRequired,\r\n            start: PropTypes.string.isRequired, // Format: \"HH:MM\"\r\n            end: PropTypes.string.isRequired, // Format: \"HH:MM\"\r\n            date: PropTypes.string.isRequired, // Format: \"YYYY-MM-DD\"\r\n            bookingProbability: PropTypes.number // Optional: probability of booking (0-1)\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * The date to display in the Gantt chart (YYYY-MM-DD).\r\n     */\r\n    date: PropTypes.string,\r\n\r\n    /**\r\n     * The start hour of the day (e.g., 6 for 6:00 AM).\r\n     */\r\n    startHour: PropTypes.number,\r\n\r\n    /**\r\n     * The end hour of the day (e.g., 24 for midnight).\r\n     */\r\n    endHour: PropTypes.number,\r\n\r\n    /**\r\n     * The duration of each slot in minutes.\r\n     */\r\n    slotDuration: PropTypes.number,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func\r\n};\r\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","handleSlotClick","bind","handleAddSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","_inherits","key","value","slot","this","setState","hour","slotDuration","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","endTimeInMinutes","endHour","endMinutes","endTime","slotId","_this$props","timeslots","setProps","filter","id","updatedTimeslots","_this$props2","date","_this$state","slotToAdd","length","max","apply","_toConsumableArray","map","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","split","Number","decimal","hours","minutes","round","slotStart","timeToDecimal","totalHours","width","left","probability","undefined","_this$props3","displayHour","isPM","timeLabel","push","React","className","professional","_this2","_this$props4","professionalSlots","name","Array","from","_","i","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","slotStyle","calculateSlotStyle","getProbabilityColor","bookingProbability","_this3","professionals","_this$state2","onChange","e","updatedSlot","parseInt","target","disabled","p","type","_this4","_this$props5","styles","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","border","borderRadius","overflow","dashGanttTimeHeader","display","borderBottom","dashGanttEmptyCell","borderRight","dashGanttHours","flex","dashGanttHour","padding","textAlign","fontWeight","dashGanttRow","height","dashGanttProfessional","alignItems","dashGanttTimeline","position","dashGanttGridLine","cursor","dashGanttSlot","top","color","fontSize","flexDirection","justifyContent","boxShadow","textOverflow","whiteSpace","zIndex","dashGanttSlotHover","dashGanttSlotTime","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","isHovered","Component","defaultProps","Date","toISOString","propTypes","PropTypes","isRequired"],"sourceRoot":""}