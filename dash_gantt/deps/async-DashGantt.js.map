{"version":3,"file":"async-DashGantt.js","mappings":"2wGAGA,IAMqBA,EAAS,SAAAC,GAC1B,SAAAD,EAAYE,GAAO,IAAAC,EAqBwC,O,4FArBxCC,CAAA,KAAAJ,IACfG,E,qYAAAE,CAAA,KAAAL,EAAA,CAAME,KAEDI,MAAQ,CACTC,aAAc,KACdC,cAAc,EACdC,QAAS,CACLC,eAAgB,KAChBC,MAAO,KACPC,IAAK,MAETC,YAAa,MAIjBV,EAAKW,gBAAkBX,EAAKW,gBAAgBC,KAAIZ,GAChDA,EAAKa,cAAgBb,EAAKa,cAAcD,KAAIZ,GAC5CA,EAAKc,iBAAmBd,EAAKc,iBAAiBF,KAAIZ,GAClDA,EAAKe,eAAiBf,EAAKe,eAAeH,KAAIZ,GAC9CA,EAAKgB,iBAAmBhB,EAAKgB,iBAAiBJ,KAAIZ,GAClDA,EAAKiB,gBAAkBjB,EAAKiB,gBAAgBL,KAAIZ,GAChDA,EAAKkB,gBAAkBlB,EAAKkB,gBAAgBN,KAAIZ,GAAOA,CAC3D,CAEA,O,qRAAAmB,CAAAtB,EAAAC,G,EAAAD,E,EAAA,EAAAuB,IAAA,kBAAAC,MACA,SAAgBC,GACZC,KAAKC,SAAS,CACVpB,aAAckB,EACdjB,cAAc,GAEtB,GAEA,CAAAe,IAAA,kBAAAC,MACA,SAAgBd,EAAgBkB,EAAMC,GAClCH,KAAKC,SAAS,CACVd,YAAa,CAAEH,eAAAA,EAAgBkB,KAAAA,EAAMC,OAAAA,IAE7C,GAEA,CAAAN,IAAA,kBAAAC,MACA,WACIE,KAAKC,SAAS,CACVd,YAAa,MAErB,GAEA,CAAAU,IAAA,gBAAAC,MACA,SAAcd,EAAgBkB,EAAMC,GAChC,IAAQC,EAAiBJ,KAAKxB,MAAtB4B,aACFC,EAAYC,KAAKC,MAAML,GACvBM,EAAeL,EACfM,EAAY,GAAHC,OAAML,EAAUM,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIF,EAAaG,WAAWC,SAAS,EAAG,MAE5FC,EAA+B,GAAZR,EAAiBG,EAAeJ,EACnDU,EAAUR,KAAKC,MAAMM,EAAmB,IACxCE,EAAaF,EAAmB,GAChCG,EAAU,GAAHN,OAAMI,EAAQH,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIK,EAAWJ,WAAWC,SAAS,EAAG,MAE5FZ,KAAKC,SAAS,CACVnB,cAAc,EACdD,aAAc,KACdE,QAAS,CACLC,eAAAA,EACAC,MAAOwB,EACPvB,IAAK8B,IAGjB,GAEA,CAAAnB,IAAA,mBAAAC,MACA,SAAiBmB,GACb,IAAAC,EAAgClB,KAAKxB,MAA7B2C,EAASD,EAATC,WAGRC,EAH2BF,EAARE,UAGV,CAAED,UAFcA,EAAUE,QAAO,SAAAtB,GAAI,OAAIA,EAAKuB,KAAOL,CAAM,MAGpEjB,KAAKC,SAAS,CAAEpB,aAAc,MAClC,GAEA,CAAAgB,IAAA,iBAAAC,MACA,WACI,IAGIyB,EAHJC,EAAsCxB,KAAKxB,MAAnC2C,EAASK,EAATL,UAAWM,EAAID,EAAJC,KAAML,EAAQI,EAARJ,SACzBM,EAAgD1B,KAAKpB,MAA7CC,EAAY6C,EAAZ7C,aAAcE,EAAO2C,EAAP3C,QAItB,GAJ2C2C,EAAZ5C,aAIb,CAEd,IACM6C,EAAY,CACdL,GAFUH,EAAUS,OAAS,EAAItB,KAAKuB,IAAGC,MAARxB,KAAIyB,EAAQZ,EAAUa,KAAI,SAAAjC,GAAI,OAAIA,EAAKuB,EAAE,MAAK,EAAI,EAGnFtC,eAAgBD,EAAQC,eACxBC,MAAOF,EAAQE,MACfC,IAAKH,EAAQG,IACbuC,KAAMA,GAGVF,EAAmB,GAAHb,OAAAqB,EAAOZ,GAAS,CAAEQ,GACtC,MAEIJ,EAAmBJ,EAAUa,KAAI,SAAAjC,GAAI,OACjCA,EAAKuB,KAAOzC,EAAayC,GAAEW,EAAAA,EAAA,GAAQlC,GAASlB,GAAiBkB,CAAI,IAIzEqB,EAAS,CAAED,UAAWI,IACtBvB,KAAKC,SAAS,CACVpB,aAAc,KACdC,cAAc,EACdC,QAAS,CACLC,eAAgB,KAChBC,MAAO,KACPC,IAAK,OAGjB,GAEA,CAAAW,IAAA,mBAAAC,MACA,WACIE,KAAKC,SAAS,CACVpB,aAAc,KACdC,cAAc,EACdC,QAAS,CACLC,eAAgB,KAChBC,MAAO,KACPC,IAAK,OAGjB,GAEA,CAAAW,IAAA,gBAAAC,MACA,SAAcoC,GACV,IAAuDC,EAAAC,EAA9BF,EAAQG,MAAM,KAAKL,IAAIM,QAAO,GACvD,OADYH,EAAA,GAASA,EAAA,GACK,EAC9B,GAEA,CAAAtC,IAAA,gBAAAC,MACA,SAAcyC,GACV,IAAMC,EAAQlC,KAAKC,MAAMgC,GACnBE,EAAUnC,KAAKoC,MAA0B,IAAnBH,EAAUC,IACtC,MAAO,GAAP9B,OAAU8B,EAAM7B,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAI+B,EAAQ9B,WAAWC,SAAS,EAAG,KAClF,GAEA,CAAAf,IAAA,sBAAAC,MACA,SAAoB6C,GAChB,YAAoBC,IAAhBD,GAEAA,GAAe,GAFmB,UAGlCA,GAAe,GAAY,UACxB,SACX,GAAC,CAAA9C,IAAA,SAAAC,MAED,WAqII,IArIK,IAAA+C,EAAA,KACLC,EAAiF9C,KAAKxB,MAA9E8C,EAAEwB,EAAFxB,GAAIyB,EAAaD,EAAbC,cAAetB,EAAIqB,EAAJrB,KAAMN,EAAS2B,EAAT3B,UAAWd,EAASyC,EAATzC,UAAWS,EAAOgC,EAAPhC,QAASV,EAAY0C,EAAZ1C,aAG1D4C,EAAe,GAAK5C,EAEpB6C,EAAS,CACXC,UAAW,CACPC,WAAY,oBACZC,OAAQ,UAEZC,gBAAiB,CACbC,aAAc,QAElBC,mBAAoB,CAChBC,OAAQ,iBACRC,aAAc,MACdC,SAAU,SACVC,UAAW,QAEfC,eAAgB,CACZC,MAAO,OACPC,eAAgB,WAChBC,YAAa,SAEjBC,mBAAoB,CAChBC,gBAAiB,WAErBC,oBAAqB,CACjBC,QAAS,MACTC,UAAW,SACXC,WAAY,OACZC,YAAa,iBACbC,aAAc,kBAElBC,yBAA0B,CACtBX,MAAO,QACPS,YAAa,iBACbC,aAAc,kBAElBE,aAAc,CACVC,OAAQ,QAEZC,0BAA2B,CACvBd,MAAO,QACPM,QAAS,MACTG,YAAa,iBACbC,aAAc,iBACdN,gBAAiB,UACjBW,cAAe,UAEnBC,kBAAmB,CACfC,SAAU,WACVX,QAAS,IACTG,YAAa,iBACbC,aAAc,iBACdQ,OAAQ,UACRL,OAAQ,OACRb,MAAO,GAAFnD,OAAK,KAAOsC,GAAgBlC,EAAUT,EAAY,IAAG,MAE9D2E,cAAe,CACXF,SAAU,WACVG,IAAK,IACLC,KAAM,IACNR,OAAQ,OACRb,MAAO,OACPI,gBAAiB,UACjBkB,MAAO,QACP1B,aAAc,MACd2B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZP,OAAQ,UACRQ,UAAW,4BACXC,OAAQ,IAEZC,qBAAsB,CAClBC,SAAU,OACVrB,WAAY,QAEhBsB,gBAAiB,CACbC,UAAW,OACXzB,QAAS,OACTX,OAAQ,iBACRC,aAAc,MACdQ,gBAAiB,WAErB4B,cAAe,CACXT,QAAS,OACTU,cAAe,SACfC,IAAK,QAETC,mBAAoB,CAChBZ,QAAS,OACTE,WAAY,UAEhBW,wBAAyB,CACrBpC,MAAO,QACPqC,YAAa,QAEjBC,wBAAyB,CACrBC,KAAM,EACNjC,QAAS,MACTX,OAAQ,iBACRC,aAAc,OAElB4C,qBAAsB,CAClBjB,QAAS,OACTW,IAAK,OACLH,UAAW,QAEfU,2BAA4B,CACxBnC,QAAS,WACTX,OAAQ,OACRC,aAAc,MACdsB,OAAQ,UACRV,WAAY,QAEhBkC,yBAA0B,CACtBtC,gBAAiB,UACjBkB,MAAO,SAEXqB,2BAA4B,CACxBvC,gBAAiB,WAErBwC,2BAA4B,CACxBxC,gBAAiB,UACjBkB,MAAO,UAKTuB,EAAa,GACVxG,EAAOG,EAAWH,GAAQY,EAASZ,IAAQ,CAChD,IAAMyG,EAAczG,EAAO,GACrB0G,EAAOD,GAAe,GAEtBE,EAAY,GAAHnG,OADuB,IAAhBiG,EAAoB,GAAMA,EAAc,GAAKA,EAAc,GAAKA,GACpDjG,OAAGkG,EAAO,KAAO,MACnDF,EAAWI,KAAKD,EACpB,CA8GA,OACIE,IAAAA,cAAA,OAAKzF,GAAIA,EAAI0F,MAAO/D,EAAOC,WACvB6D,IAAAA,cAAA,OAAKC,MAAO/D,EAAOI,iBACf0D,IAAAA,cAAA,UAAI,gBAActF,IAEtBsF,IAAAA,cAAA,OAAKC,MAAO/D,EAAOM,oBACfwD,IAAAA,cAAA,SAAOC,MAAO/D,EAAOW,gBACjBmD,IAAAA,cAAA,aACIA,IAAAA,cAAA,MAAIC,MAAO/D,EAAOe,oBACd+C,IAAAA,cAAA,MAAIC,MAAO/D,EAAOuB,2BAhCV,WAG5B,IAFA,IAAMyC,EAAQ,GAEL/G,EAAOG,EAAWH,GAAQY,EAASZ,IAAQ,CAChD,IAAMyG,EAAczG,EAAO,GACrB0G,EAAOD,GAAe,GAEtBE,EAAY,GAAHnG,OADuB,IAAhBiG,EAAoB,GAAMA,EAAc,GAAKA,EAAc,GAAKA,GACpDjG,OAAGkG,EAAO,KAAO,MAEnDK,EAAMH,KACFC,IAAAA,cAAA,MACIlH,IAAG,UAAAa,OAAYR,GACfgH,QAASlE,EACTgE,MAAO/D,EAAOiB,qBAEb2C,GAGb,CAEA,OAAOI,CACX,CAYyBE,KAGTJ,IAAAA,cAAA,aACKhE,EAAcf,KAAI,SAAAoF,GAAY,OAC3BL,IAAAA,cAAA,MAAIlH,IAAG,OAAAa,OAAS0G,EAAa9F,IAAM0F,MAAO/D,EAAOwB,cAC7CsC,IAAAA,cAAA,MAAIC,MAAO/D,EAAO0B,2BACbyC,EAAaC,MA5HpB,SAACD,GAIvB,IAHA,IAAMH,EAAQ,GACRK,EAAoBnG,EAAUE,QAAO,SAAAtB,GAAI,OAAIA,EAAKf,iBAAmBoI,EAAa9F,EAAE,IAAEiG,EAAA,SAAAC,GAGxF,IADgD,IAAAC,EAAA,WAE5C,IAAMtH,EAASuH,EAActH,EACvBuH,EAAU,GAAHjH,OAAMR,EAAKS,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIP,EAAOQ,WAAWC,SAAS,EAAG,MAG/EgH,EAAeN,EAAkBO,MAAK,SAAA9H,GACxC,IAAgE+H,EAAA1F,EAAjCrC,EAAKd,MAAMoD,MAAM,KAAKL,IAAIM,QAAO,GAAzDyF,EAAQD,EAAA,GAAEE,EAAUF,EAAA,GAC3B,OAAOC,IAAa7H,GAAQ8H,IAAe7H,CAC/C,IAGM8H,EAAeX,EAAkBO,MAAK,SAAA9H,GACxC,IAAMmI,EAAYrF,EAAKsF,cAAcpI,EAAKd,OACpCmJ,EAAUvF,EAAKsF,cAAcpI,EAAKb,KAClCmJ,EAAcnI,EAAQC,EAAS,GAGrC,OAAOkI,GAAeH,GAAaG,EAAcD,CACrD,IAEME,EAAYzF,EAAKjE,MAAMO,aACb0D,EAAKjE,MAAMO,YAAYH,iBAAmBoI,EAAa9F,IACvDuB,EAAKjE,MAAMO,YAAYe,OAASA,GAChC2C,EAAKjE,MAAMO,YAAYgB,SAAWA,EAElD8G,EAAMH,KACFC,IAAAA,cAAA,MACIlH,IAAG,QAAAa,OAAU0G,EAAa9F,GAAE,KAAAZ,OAAIiH,GAChCX,MAAK/E,EAAAA,EAAA,GACEgB,EAAO4B,mBAAiB,IAC3BZ,gBAAiBqE,EAAY,UAAY,cACzCC,WAAuB,IAAXpI,EAAe,iBAAmB,SAElDqI,QAAS,WAAF,OAAQ3F,EAAKvD,cAAc8H,EAAa9F,GAAIpB,EAAMC,EAAO,EAChEsI,aAAc,WAAF,OAAQ5F,EAAKnD,gBAAgB0H,EAAa9F,GAAIpB,EAAMC,EAAO,EACvEuI,aAAc7F,EAAKlD,iBAElBiI,GACGb,IAAAA,cAAA,OACIlH,IAAG,QAAAa,OAAUkH,EAAatG,IAC1B0F,MAAK/E,EAAAA,EAAA,GACEgB,EAAO+B,eAAa,IACvBf,gBAAiBpB,EAAK8F,oBAAoBf,EAAagB,sBAE3DJ,QAAS,SAACK,GACNA,EAAEC,kBACFjG,EAAKzD,gBAAgBwI,EACzB,QAEqChF,IAApCgF,EAAagB,oBACV7B,IAAAA,cAAA,OAAKC,MAAO/D,EAAOwC,sBACdnF,KAAKoC,MAAwC,IAAlCkF,EAAagB,oBAA0B,OAKjEhB,GAAgBK,GACdlB,IAAAA,cAAA,OACIC,MAAK/E,EAAAA,EAAA,GACEgB,EAAO+B,eAAa,IACvBf,gBAAiBpB,EAAK8F,oBAAoBV,EAAaW,sBAE3DJ,QAAS,SAACK,GACNA,EAAEC,kBACFjG,EAAKzD,gBAAgB6I,EACzB,KAOpB,EAxESP,EAAc,EAAGA,EAAc1E,EAAc0E,IAAaD,GAyEvE,EA1ESvH,EAAOG,EAAWH,GAAQY,EAASZ,IAAMqH,EAAAC,GA4ElD,OAAOP,CACX,CA6C6B8B,CAAkB3B,GAClB,OAOpBpH,KAAKpB,MAAMC,cAAgBmB,KAAKpB,MAAME,aACnCiI,IAAAA,cAAA,OAAKC,MAAO/D,EAAO0C,iBACfoB,IAAAA,cAAA,UAAK/G,KAAKpB,MAAME,aAAe,eAAiB,aAChDiI,IAAAA,cAAA,OAAKC,MAAO/D,EAAO4C,eACfkB,IAAAA,cAAA,OAAKC,MAAO/D,EAAO+C,oBACfe,IAAAA,cAAA,SAAOC,MAAO/D,EAAOgD,yBAAyB,iBAC9Cc,IAAAA,cAAA,UACIC,MAAO/D,EAAOkD,wBACdrG,MAAOE,KAAKpB,MAAME,aAAekB,KAAKpB,MAAMG,QAAQC,eAAiBgB,KAAKpB,MAAMC,aAAaG,eAC7FgK,SAAU,SAAAH,GACN,IAAM7J,EAAiBiK,SAASJ,EAAEK,OAAOpJ,OACrC+C,EAAKjE,MAAME,aACX+D,EAAK5C,SAAS,CAAElB,QAAOkD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMG,SAAO,IAAEC,eAAAA,MAElD6D,EAAK5C,SAAS,CAAEpB,aAAYoD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMC,cAAY,IAAEG,eAAAA,KAEpE,EACAmK,UAAWnJ,KAAKpB,MAAME,cAErBiE,EAAcf,KAAI,SAAAoH,GAAC,OAChBrC,IAAAA,cAAA,UAAQlH,IAAKuJ,EAAE9H,GAAIxB,MAAOsJ,EAAE9H,IAAK8H,EAAE/B,KAAc,MAI7DN,IAAAA,cAAA,OAAKC,MAAO/D,EAAO+C,oBACfe,IAAAA,cAAA,SAAOC,MAAO/D,EAAOgD,yBAAyB,eAC9Cc,IAAAA,cAAA,SACIsC,KAAK,OACLrC,MAAO/D,EAAOkD,wBACdrG,MAAOE,KAAKpB,MAAME,aAAekB,KAAKpB,MAAMG,QAAQE,MAAQe,KAAKpB,MAAMC,aAAaI,MACpF+J,SAAU,SAAAH,GACN,IAAM5J,EAAQ4J,EAAEK,OAAOpJ,MACnB+C,EAAKjE,MAAME,aACX+D,EAAK5C,SAAS,CAAElB,QAAOkD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMG,SAAO,IAAEE,MAAAA,MAElD4D,EAAK5C,SAAS,CAAEpB,aAAYoD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMC,cAAY,IAAEI,MAAAA,KAEpE,KAGR8H,IAAAA,cAAA,OAAKC,MAAO/D,EAAO+C,oBACfe,IAAAA,cAAA,SAAOC,MAAO/D,EAAOgD,yBAAyB,aAC9Cc,IAAAA,cAAA,SACIsC,KAAK,OACLrC,MAAO/D,EAAOkD,wBACdrG,MAAOE,KAAKpB,MAAME,aAAekB,KAAKpB,MAAMG,QAAQG,IAAMc,KAAKpB,MAAMC,aAAaK,IAClF8J,SAAU,SAAAH,GACN,IAAM3J,EAAM2J,EAAEK,OAAOpJ,MACjB+C,EAAKjE,MAAME,aACX+D,EAAK5C,SAAS,CAAElB,QAAOkD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMG,SAAO,IAAEG,IAAAA,MAElD2D,EAAK5C,SAAS,CAAEpB,aAAYoD,EAAAA,EAAA,GAAOY,EAAKjE,MAAMC,cAAY,IAAEK,IAAAA,KAEpE,KAGR6H,IAAAA,cAAA,OAAKC,MAAO/D,EAAOoD,sBACfU,IAAAA,cAAA,UACIC,MAAK/E,EAAAA,EAAA,GAAMgB,EAAOqD,4BAA+BrD,EAAOsD,0BACxDiC,QAASxI,KAAKR,gBACjB,QAGDuH,IAAAA,cAAA,UACIC,MAAK/E,EAAAA,EAAA,GAAMgB,EAAOqD,4BAA+BrD,EAAOuD,4BACxDgC,QAASxI,KAAKP,kBACjB,WAGCO,KAAKpB,MAAME,cACTiI,IAAAA,cAAA,UACIC,MAAK/E,EAAAA,EAAA,GAAMgB,EAAOqD,4BAA+BrD,EAAOwD,4BACxD+B,QAAS,WAAF,OAAQ3F,EAAKtD,iBAAiBsD,EAAKjE,MAAMC,aAAayC,GAAG,GACnE,aAOjB,KAGhB,I,gFAAC,CA/fyB,CAASgI,EAAAA,WAkgBvChL,EAAUiL,aAAe,CACrBpI,UAAW,GACXM,MAAM,IAAI+H,MAAOC,cAAcpH,MAAM,KAAK,GAC1ChC,UAAW,EACXS,QAAS,GACTV,aAAc,IAGlB9B,EAAUoL,UAAY,CAIlBpI,GAAIqI,IAAAA,OAMJ5G,cAAe4G,IAAAA,QACXA,IAAAA,MAAgB,CACZrI,GAAIqI,IAAAA,OAAiBC,WACrBvC,KAAMsC,IAAAA,OAAiBC,cAE7BA,WAMFzI,UAAWwI,IAAAA,QACPA,IAAAA,MAAgB,CACZrI,GAAIqI,IAAAA,OAAiBC,WACrB5K,eAAgB2K,IAAAA,OAAiBC,WACjC3K,MAAO0K,IAAAA,OAAiBC,WACxB1K,IAAKyK,IAAAA,OAAiBC,WACtBnI,KAAMkI,IAAAA,OAAiBC,WACvBhB,mBAAoBe,IAAAA,UAO5BlI,KAAMkI,IAAAA,OAKNtJ,UAAWsJ,IAAAA,OAKX7I,QAAS6I,IAAAA,OAKTvJ,aAAcuJ,IAAAA,OAMdvI,SAAUuI,IAAAA,K","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * DashGantt is a Gantt chart component for scheduling.\r\n * It displays professionals vertically and time horizontally.\r\n * Users can add, modify, and remove timeslots for each professional.\r\n * The component outputs data that can be used in a prediction model.\r\n */\r\nexport default class DashGantt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            },\r\n            hoveredCell: null\r\n        };\r\n        \r\n        // Bind methods\r\n        this.handleSlotClick = this.handleSlotClick.bind(this);\r\n        this.handleAddSlot = this.handleAddSlot.bind(this);\r\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\r\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\r\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\r\n        this.handleCellHover = this.handleCellHover.bind(this);\r\n        this.handleCellLeave = this.handleCellLeave.bind(this);\r\n    }\r\n    \r\n    // Handle clicking on a timeslot\r\n    handleSlotClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            isAddingSlot: false\r\n        });\r\n    }\r\n    \r\n    // Handle cell hover\r\n    handleCellHover(professionalId, hour, minute) {\r\n        this.setState({\r\n            hoveredCell: { professionalId, hour, minute }\r\n        });\r\n    }\r\n    \r\n    // Handle cell leave\r\n    handleCellLeave() {\r\n        this.setState({\r\n            hoveredCell: null\r\n        });\r\n    }\r\n    \r\n    // Handle adding a new timeslot\r\n    handleAddSlot(professionalId, hour, minute) {\r\n        const { slotDuration } = this.props;\r\n        const startHour = Math.floor(hour);\r\n        const startMinutes = minute;\r\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\r\n        const endHour = Math.floor(endTimeInMinutes / 60);\r\n        const endMinutes = endTimeInMinutes % 60;\r\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        this.setState({\r\n            isAddingSlot: true,\r\n            selectedSlot: null,\r\n            newSlot: {\r\n                professionalId,\r\n                start: startTime,\r\n                end: endTime\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle removing a timeslot\r\n    handleRemoveSlot(slotId) {\r\n        const { timeslots, setProps } = this.props;\r\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\r\n        \r\n        setProps({ timeslots: updatedTimeslots });\r\n        this.setState({ selectedSlot: null });\r\n    }\r\n    \r\n    // Handle saving a timeslot (new or edited)\r\n    handleSaveSlot() {\r\n        const { timeslots, date, setProps } = this.props;\r\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\r\n        \r\n        let updatedTimeslots;\r\n        \r\n        if (isAddingSlot) {\r\n            // Add new slot\r\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\r\n            const slotToAdd = {\r\n                id: newId,\r\n                professionalId: newSlot.professionalId,\r\n                start: newSlot.start,\r\n                end: newSlot.end,\r\n                date: date\r\n            };\r\n            \r\n            updatedTimeslots = [...timeslots, slotToAdd];\r\n        } else {\r\n            // Update existing slot\r\n            updatedTimeslots = timeslots.map(slot => \r\n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\r\n            );\r\n        }\r\n        \r\n        setProps({ timeslots: updatedTimeslots });\r\n        this.setState({\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle canceling edit or add operation\r\n    handleCancelEdit() {\r\n        this.setState({\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Convert time string to decimal hours\r\n    timeToDecimal(timeStr) {\r\n        const [hours, minutes] = timeStr.split(':').map(Number);\r\n        return hours + (minutes / 60);\r\n    }\r\n    \r\n    // Format decimal hours to time string\r\n    decimalToTime(decimal) {\r\n        const hours = Math.floor(decimal);\r\n        const minutes = Math.round((decimal - hours) * 60);\r\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    // Get color based on booking probability\r\n    getProbabilityColor(probability) {\r\n        if (probability === undefined) return '#4CAF50'; // Default green\r\n        \r\n        if (probability >= 0.7) return '#4CAF50'; // Green for high probability\r\n        if (probability >= 0.4) return '#FFC107'; // Yellow for medium probability\r\n        return '#F44336'; // Red for low probability\r\n    }\r\n    \r\n    render() {\r\n        const { id, professionals, date, timeslots, startHour, endHour, slotDuration } = this.props;\r\n        \r\n        // Calculate number of time slots per hour (e.g., 3 for 20-minute slots)\r\n        const slotsPerHour = 60 / slotDuration;\r\n        \r\n        const styles = {\r\n            dashGantt: {\r\n                fontFamily: 'Arial, sans-serif',\r\n                margin: '20px 0'\r\n            },\r\n            dashGanttHeader: {\r\n                marginBottom: '10px'\r\n            },\r\n            dashGanttContainer: {\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px',\r\n                overflow: 'hidden',\r\n                overflowX: 'auto'\r\n            },\r\n            dashGanttTable: {\r\n                width: '100%',\r\n                borderCollapse: 'collapse',\r\n                tableLayout: 'fixed'\r\n            },\r\n            dashGanttHeaderRow: {\r\n                backgroundColor: '#f5f5f5'\r\n            },\r\n            dashGanttHeaderCell: {\r\n                padding: '8px',\r\n                textAlign: 'center',\r\n                fontWeight: 'bold',\r\n                borderRight: '1px solid #ccc',\r\n                borderBottom: '1px solid #ccc'\r\n            },\r\n            dashGanttFirstHeaderCell: {\r\n                width: '150px',\r\n                borderRight: '1px solid #ccc',\r\n                borderBottom: '1px solid #ccc'\r\n            },\r\n            dashGanttRow: {\r\n                height: '60px'\r\n            },\r\n            dashGanttProfessionalCell: {\r\n                width: '150px',\r\n                padding: '8px',\r\n                borderRight: '1px solid #ccc',\r\n                borderBottom: '1px solid #ccc',\r\n                backgroundColor: '#f9f9f9',\r\n                verticalAlign: 'middle'\r\n            },\r\n            dashGanttTimeCell: {\r\n                position: 'relative',\r\n                padding: '0',\r\n                borderRight: '1px solid #eee',\r\n                borderBottom: '1px solid #ccc',\r\n                cursor: 'pointer',\r\n                height: '60px',\r\n                width: `${100 / (slotsPerHour * (endHour - startHour + 1))}%`\r\n            },\r\n            dashGanttSlot: {\r\n                position: 'absolute',\r\n                top: '0',\r\n                left: '0',\r\n                height: '100%',\r\n                width: '100%',\r\n                backgroundColor: '#4CAF50',\r\n                color: 'white',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n                zIndex: 10\r\n            },\r\n            dashGanttProbability: {\r\n                fontSize: '14px',\r\n                fontWeight: 'bold'\r\n            },\r\n            dashGanttEditor: {\r\n                marginTop: '20px',\r\n                padding: '15px',\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px',\r\n                backgroundColor: '#f9f9f9'\r\n            },\r\n            dashGanttForm: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: '10px'\r\n            },\r\n            dashGanttFormGroup: {\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n            },\r\n            dashGanttFormGroupLabel: {\r\n                width: '100px',\r\n                marginRight: '10px'\r\n            },\r\n            dashGanttFormGroupInput: {\r\n                flex: 1,\r\n                padding: '8px',\r\n                border: '1px solid #ccc',\r\n                borderRadius: '4px'\r\n            },\r\n            dashGanttFormActions: {\r\n                display: 'flex',\r\n                gap: '10px',\r\n                marginTop: '10px'\r\n            },\r\n            dashGanttFormActionsButton: {\r\n                padding: '8px 15px',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold'\r\n            },\r\n            dashGanttFormActionsSave: {\r\n                backgroundColor: '#4CAF50',\r\n                color: 'white'\r\n            },\r\n            dashGanttFormActionsCancel: {\r\n                backgroundColor: '#f5f5f5'\r\n            },\r\n            dashGanttFormActionsRemove: {\r\n                backgroundColor: '#f44336',\r\n                color: 'white'\r\n            }\r\n        };\r\n        \r\n        // Generate hour labels\r\n        const hourLabels = [];\r\n        for (let hour = startHour; hour <= endHour; hour++) {\r\n            const displayHour = hour % 24; // Handle 24-hour format\r\n            const isPM = displayHour >= 12;\r\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\r\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\r\n            hourLabels.push(timeLabel);\r\n        }\r\n        \r\n        // Generate time cells for each hour and minute interval\r\n        const generateTimeCells = (professional) => {\r\n            const cells = [];\r\n            const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\r\n            \r\n            for (let hour = startHour; hour <= endHour; hour++) {\r\n                for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\r\n                    const minute = minuteIndex * slotDuration;\r\n                    const timeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n                    \r\n                    // Check if there's a slot that starts at this exact time\r\n                    const matchingSlot = professionalSlots.find(slot => {\r\n                        const [slotHour, slotMinute] = slot.start.split(':').map(Number);\r\n                        return slotHour === hour && slotMinute === minute;\r\n                    });\r\n                    \r\n                    // Check if this time is within any slot's range\r\n                    const isWithinSlot = professionalSlots.find(slot => {\r\n                        const slotStart = this.timeToDecimal(slot.start);\r\n                        const slotEnd = this.timeToDecimal(slot.end);\r\n                        const currentTime = hour + (minute / 60);\r\n                        \r\n                        // Check if current time is within the slot's range\r\n                        return currentTime >= slotStart && currentTime < slotEnd;\r\n                    });\r\n                    \r\n                    const isHovered = this.state.hoveredCell && \r\n                                    this.state.hoveredCell.professionalId === professional.id && \r\n                                    this.state.hoveredCell.hour === hour &&\r\n                                    this.state.hoveredCell.minute === minute;\r\n                    \r\n                    cells.push(\r\n                        <td \r\n                            key={`cell-${professional.id}-${timeKey}`} \r\n                            style={{\r\n                                ...styles.dashGanttTimeCell,\r\n                                backgroundColor: isHovered ? '#f0f0f0' : 'transparent',\r\n                                borderLeft: minute === 0 ? '1px solid #ccc' : 'none'\r\n                            }}\r\n                            onClick={() => this.handleAddSlot(professional.id, hour, minute)}\r\n                            onMouseEnter={() => this.handleCellHover(professional.id, hour, minute)}\r\n                            onMouseLeave={this.handleCellLeave}\r\n                        >\r\n                            {matchingSlot && (\r\n                                <div \r\n                                    key={`slot-${matchingSlot.id}`} \r\n                                    style={{\r\n                                        ...styles.dashGanttSlot,\r\n                                        backgroundColor: this.getProbabilityColor(matchingSlot.bookingProbability)\r\n                                    }}\r\n                                    onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        this.handleSlotClick(matchingSlot);\r\n                                    }}\r\n                                >\r\n                                    {matchingSlot.bookingProbability !== undefined && (\r\n                                        <div style={styles.dashGanttProbability}>\r\n                                            {Math.round(matchingSlot.bookingProbability * 100)}%\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                            {!matchingSlot && isWithinSlot && (\r\n                                <div \r\n                                    style={{\r\n                                        ...styles.dashGanttSlot,\r\n                                        backgroundColor: this.getProbabilityColor(isWithinSlot.bookingProbability)\r\n                                    }}\r\n                                    onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        this.handleSlotClick(isWithinSlot);\r\n                                    }}\r\n                                >\r\n                                    {/* No content for continuation cells */}\r\n                                </div>\r\n                            )}\r\n                        </td>\r\n                    );\r\n                }\r\n            }\r\n            \r\n            return cells;\r\n        };\r\n        \r\n        // Generate hour header cells\r\n        const generateHourHeaderCells = () => {\r\n            const cells = [];\r\n            \r\n            for (let hour = startHour; hour <= endHour; hour++) {\r\n                const displayHour = hour % 24; // Handle 24-hour format\r\n                const isPM = displayHour >= 12;\r\n                const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\r\n                const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\r\n                \r\n                cells.push(\r\n                    <th \r\n                        key={`header-${hour}`} \r\n                        colSpan={slotsPerHour}\r\n                        style={styles.dashGanttHeaderCell}\r\n                    >\r\n                        {timeLabel}\r\n                    </th>\r\n                );\r\n            }\r\n            \r\n            return cells;\r\n        };\r\n        \r\n        return (\r\n            <div id={id} style={styles.dashGantt}>\r\n                <div style={styles.dashGanttHeader}>\r\n                    <h2>Schedule for {date}</h2>\r\n                </div>\r\n                <div style={styles.dashGanttContainer}>\r\n                    <table style={styles.dashGanttTable}>\r\n                        <thead>\r\n                            <tr style={styles.dashGanttHeaderRow}>\r\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\r\n                                {generateHourHeaderCells()}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {professionals.map(professional => (\r\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\r\n                                    <td style={styles.dashGanttProfessionalCell}>\r\n                                        {professional.name}\r\n                                    </td>\r\n                                    {generateTimeCells(professional)}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                \r\n                {/* Render slot editor */}\r\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\r\n                    <div style={styles.dashGanttEditor}>\r\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\r\n                        <div style={styles.dashGanttForm}>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\r\n                                <select \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \r\n                                    onChange={e => {\r\n                                        const professionalId = parseInt(e.target.value);\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\r\n                                        }\r\n                                    }}\r\n                                    disabled={!this.state.isAddingSlot}\r\n                                >\r\n                                    {professionals.map(p => (\r\n                                        <option key={p.id} value={p.id}>{p.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \r\n                                    onChange={e => {\r\n                                        const start = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \r\n                                    onChange={e => {\r\n                                        const end = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormActions}>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\r\n                                    onClick={this.handleSaveSlot}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\r\n                                    onClick={this.handleCancelEdit}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                {!this.state.isAddingSlot && (\r\n                                    <button \r\n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\r\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\r\n                                    >\r\n                                        Remove\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDashGantt.defaultProps = {\r\n    timeslots: [],\r\n    date: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format\r\n    startHour: 6, // 6:00 AM\r\n    endHour: 24, // Midnight\r\n    slotDuration: 20, // 20 minutes\r\n};\r\n\r\nDashGantt.propTypes = {\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * List of professionals to display in the Gantt chart.\r\n     * Each professional should have an id and name.\r\n     */\r\n    professionals: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired,\r\n\r\n    /**\r\n     * List of timeslots to display in the Gantt chart.\r\n     * Each timeslot should have an id, professionalId, start time, end time, and date.\r\n     */\r\n    timeslots: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            professionalId: PropTypes.number.isRequired,\r\n            start: PropTypes.string.isRequired, // Format: \"HH:MM\"\r\n            end: PropTypes.string.isRequired, // Format: \"HH:MM\"\r\n            date: PropTypes.string.isRequired, // Format: \"YYYY-MM-DD\"\r\n            bookingProbability: PropTypes.number // Optional: probability of booking (0-1)\r\n        })\r\n    ),\r\n\r\n    /**\r\n     * The date to display in the Gantt chart (YYYY-MM-DD).\r\n     */\r\n    date: PropTypes.string,\r\n\r\n    /**\r\n     * The start hour of the day (e.g., 6 for 6:00 AM).\r\n     */\r\n    startHour: PropTypes.number,\r\n\r\n    /**\r\n     * The end hour of the day (e.g., 24 for midnight).\r\n     */\r\n    endHour: PropTypes.number,\r\n\r\n    /**\r\n     * The duration of each slot in minutes.\r\n     */\r\n    slotDuration: PropTypes.number,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func\r\n};\r\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","handleSlotClick","bind","handleAddSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","_inherits","key","value","slot","this","setState","hour","minute","slotDuration","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","endTimeInMinutes","endHour","endMinutes","endTime","slotId","_this$props","timeslots","setProps","filter","id","updatedTimeslots","_this$props2","date","_this$state","slotToAdd","length","max","apply","_toConsumableArray","map","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","split","Number","decimal","hours","minutes","round","probability","undefined","_this2","_this$props3","professionals","slotsPerHour","styles","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","border","borderRadius","overflow","overflowX","dashGanttTable","width","borderCollapse","tableLayout","dashGanttHeaderRow","backgroundColor","dashGanttHeaderCell","padding","textAlign","fontWeight","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","height","dashGanttProfessionalCell","verticalAlign","dashGanttTimeCell","position","cursor","dashGanttSlot","top","left","color","display","justifyContent","alignItems","boxShadow","zIndex","dashGanttProbability","fontSize","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","push","React","style","cells","colSpan","generateHourHeaderCells","professional","name","professionalSlots","_loop","_hour","_loop2","minuteIndex","timeKey","matchingSlot","find","_slot$start$split$map2","slotHour","slotMinute","isWithinSlot","slotStart","timeToDecimal","slotEnd","currentTime","isHovered","borderLeft","onClick","onMouseEnter","onMouseLeave","getProbabilityColor","bookingProbability","e","stopPropagation","generateTimeCells","onChange","parseInt","target","disabled","p","type","Component","defaultProps","Date","toISOString","propTypes","PropTypes","isRequired"],"sourceRoot":""}