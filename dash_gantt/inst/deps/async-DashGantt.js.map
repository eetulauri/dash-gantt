{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * DashGantt is a Gantt chart component for scheduling.\r\n * It displays professionals vertically and time horizontally.\r\n * Users can add, modify, and remove timeslots for each professional.\r\n * The component outputs data that can be used in a prediction model.\r\n */\r\nexport default class DashGantt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // Add table ref\r\n        this.tableRef = React.createRef();\r\n        \r\n        // Initialize state with props\r\n        const { rawData, date } = props;\r\n        const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || new Date().toISOString().split('T')[0]);\r\n        \r\n        this.state = {\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            },\r\n            hoveredCell: null,\r\n            // Cache for slot width calculations to avoid repeated calculations\r\n            slotWidthCache: {},\r\n            // Internal state for transformed data\r\n            professionals: professionals || [],\r\n            timeslots: timeslots || [],\r\n            rawData: rawData || [],\r\n            date: date || new Date().toISOString().split('T')[0],\r\n            isDragging: false,\r\n            dragSide: null, // 'start' or 'end'\r\n            draggedSlot: null,\r\n            originalSlot: null,\r\n            dragPreview: null, // Will show preview of where slot will end up\r\n            dragType: null, // 'move', 'start', or 'end'\r\n        };\r\n        \r\n        // Bind methods\r\n        this.handleSlotClick = this.handleSlotClick.bind(this);\r\n        this.handleAddSlot = this.handleAddSlot.bind(this);\r\n        this.handleCreateSlot = this.handleCreateSlot.bind(this);\r\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\r\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\r\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\r\n        this.handleCellHover = this.handleCellHover.bind(this);\r\n        this.handleCellLeave = this.handleCellLeave.bind(this);\r\n        this.renderSlotRectangle = this.renderSlotRectangle.bind(this);\r\n        this.generateTimeCells = this.generateTimeCells.bind(this);\r\n        this.formatTime = this.formatTime.bind(this);\r\n        this.timeToDecimal = this.timeToDecimal.bind(this);\r\n        this.calculateSlotWidth = this.calculateSlotWidth.bind(this);\r\n        this.getSlotWidth = this.getSlotWidth.bind(this);\r\n        this.updateRawData = this.updateRawData.bind(this);\r\n        this.handleDragStart = this.handleDragStart.bind(this);\r\n        this.handleDrag = this.handleDrag.bind(this);\r\n        this.handleDragEnd = this.handleDragEnd.bind(this);\r\n    }\r\n    \r\n    // Transform raw data into component format\r\n    static transformData(rawData, date) {\r\n        if (!rawData || !date) return { professionals: [], timeslots: [] };\r\n\r\n        // Filter data for the specific date\r\n        const filteredData = rawData.filter(row => {\r\n            const rowDate = row.datetime.split(' ')[0];\r\n            return rowDate === date;\r\n        });\r\n\r\n        // Create professionals list from unique doctors\r\n        const professionals = Array.from(new Set(filteredData.map(row => row.laakari)))\r\n            .map((doctor, idx) => ({ id: idx + 1, name: doctor }));\r\n\r\n        // Create doctor to id mapping\r\n        const doctorToId = Object.fromEntries(\r\n            professionals.map((p, idx) => [p.name, idx + 1])\r\n        );\r\n\r\n        // Transform timeslots\r\n        const timeslots = filteredData.map((row, idx) => {\r\n            const [date, time] = row.datetime.split(' ');\r\n            const startTime = time;\r\n            \r\n            // Calculate end time based on duration\r\n            const [hours, minutes] = time.split(':').map(Number);\r\n            const startDate = new Date();\r\n            startDate.setHours(hours, minutes, 0);\r\n            // Use kesto_min directly from the data\r\n            const durationMinutes = row.kesto_min || 0;\r\n            const endDate = new Date(startDate.getTime() + durationMinutes * 60000);\r\n            const endTime = `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}`;\r\n\r\n            return {\r\n                id: idx + 1,\r\n                professionalId: doctorToId[row.laakari],\r\n                start: startTime,\r\n                end: endTime,\r\n                date: date,\r\n                durationMinutes: durationMinutes, // Store the original duration\r\n                bookingProbability: row.bookingProbability || 0.5,\r\n                isBooked: row.tyhja === 0,\r\n                rawData: row // Keep reference to original data with all fields\r\n            };\r\n        });\r\n\r\n        return { professionals, timeslots };\r\n    }\r\n    \r\n    // Update getDerivedStateFromProps to handle undefined values\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (!nextProps) return null;\r\n        \r\n        const { rawData, date } = nextProps;\r\n        if (rawData !== prevState.rawData || date !== prevState.date) {\r\n            const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || prevState.date);\r\n            return { \r\n                professionals: professionals || [], \r\n                timeslots: timeslots || [], \r\n                rawData: rawData || [], \r\n                date: date || prevState.date \r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Update componentDidMount to handle undefined values\r\n    componentDidMount() {\r\n        const { rawData, date } = this.props;\r\n        const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || this.state.date);\r\n        this.setState({ \r\n            professionals: professionals || [], \r\n            timeslots: timeslots || [],\r\n            rawData: rawData || [],\r\n            date: date || this.state.date\r\n        });\r\n    }\r\n    \r\n    // Handle clicking on a timeslot\r\n    handleSlotClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            isAddingSlot: false\r\n        });\r\n    }\r\n    \r\n    // Handle cell hover\r\n    handleCellHover(professionalId, hour, minute) {\r\n        // Avoid unnecessary state updates if hovering over the same cell\r\n        const currentHover = this.state.hoveredCell;\r\n        if (currentHover && \r\n            currentHover.professionalId === professionalId && \r\n            currentHover.hour === hour && \r\n            currentHover.minute === minute) {\r\n            return; // No change needed\r\n        }\r\n        \r\n        // Update the hover state\r\n        this.setState({\r\n            hoveredCell: { professionalId, hour, minute }\r\n        });\r\n    }\r\n    \r\n    // Handle cell leave\r\n    handleCellLeave() {\r\n        // Only update state if we're currently hovering over a cell\r\n        if (this.state.hoveredCell !== null) {\r\n            this.setState({\r\n                hoveredCell: null\r\n            });\r\n        }\r\n    }\r\n    \r\n    // Handle creating a new timeslot with a single click\r\n    handleCreateSlot(professionalId, hour, minute) {\r\n        const { timeslots, date } = this.state;\r\n        \r\n        // Calculate start and end times\r\n        const startHour = Math.floor(hour);\r\n        const startMinutes = minute;\r\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        // Always create a 20-minute slot as per business requirements\r\n        const slotDurationMinutes = 20;\r\n        \r\n        // Calculate end time\r\n        const totalStartMinutes = (startHour * 60) + startMinutes;\r\n        const totalEndMinutes = totalStartMinutes + slotDurationMinutes;\r\n        const endHour = Math.floor(totalEndMinutes / 60);\r\n        const endMinutes = totalEndMinutes % 60;\r\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        // Create new slot\r\n        const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\r\n        const slotToAdd = {\r\n            id: newId,\r\n            professionalId: professionalId,\r\n            start: startTime,\r\n            end: endTime,\r\n            date: date,\r\n            bookingProbability: 0.5,\r\n            isBooked: false,\r\n            appointmentType: 'In-person appointment',\r\n            resource: 'Default',\r\n            rawData: null // New slot has no original data\r\n        };\r\n        \r\n        // Update timeslots and raw data\r\n        const updatedTimeslots = [...timeslots, slotToAdd];\r\n        this.setState({ timeslots: updatedTimeslots });\r\n        this.updateRawData(updatedTimeslots);\r\n    }\r\n    \r\n    // Handle adding a new timeslot\r\n    handleAddSlot(professionalId, hour, minute) {\r\n        const { slotDuration } = this.props;\r\n        const startHour = Math.floor(hour);\r\n        const startMinutes = minute;\r\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\r\n        const endHour = Math.floor(endTimeInMinutes / 60);\r\n        const endMinutes = endTimeInMinutes % 60;\r\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\r\n        \r\n        this.setState({\r\n            isAddingSlot: true,\r\n            selectedSlot: null,\r\n            newSlot: {\r\n                professionalId,\r\n                start: startTime,\r\n                end: endTime\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Handle removing a timeslot\r\n    handleRemoveSlot(slotId) {\r\n        const { timeslots } = this.state;\r\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\r\n        this.setState({ \r\n            timeslots: updatedTimeslots,\r\n            selectedSlot: null\r\n        });\r\n        this.updateRawData(updatedTimeslots);\r\n    }\r\n    \r\n    // Handle saving a timeslot (new or edited)\r\n    handleSaveSlot() {\r\n        const { timeslots } = this.state;\r\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\r\n        \r\n        let updatedTimeslots;\r\n        \r\n        if (isAddingSlot) {\r\n            // Add new slot\r\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\r\n            const slotToAdd = {\r\n                id: newId,\r\n                professionalId: newSlot.professionalId,\r\n                start: newSlot.start,\r\n                end: newSlot.end,\r\n                date: this.props.date,\r\n                bookingProbability: 0.5,\r\n                isBooked: false,\r\n                appointmentType: 'In-person appointment',\r\n                resource: 'Default',\r\n                rawData: null\r\n            };\r\n            \r\n            updatedTimeslots = [...timeslots, slotToAdd];\r\n        } else {\r\n            // Update existing slot\r\n            updatedTimeslots = timeslots.map(slot => \r\n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\r\n            );\r\n        }\r\n        \r\n        this.setState({\r\n            timeslots: updatedTimeslots,\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n        \r\n        this.updateRawData(updatedTimeslots);\r\n    }\r\n    \r\n    // Handle canceling edit or add operation\r\n    handleCancelEdit() {\r\n        this.setState({\r\n            selectedSlot: null,\r\n            isAddingSlot: false,\r\n            newSlot: {\r\n                professionalId: null,\r\n                start: null,\r\n                end: null\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Convert time string to decimal hours\r\n    timeToDecimal(timeStr) {\r\n        const [hours, minutes] = timeStr.split(':').map(Number);\r\n        return hours + (minutes / 60);\r\n    }\r\n    \r\n    // Calculate the width of a slot that should span multiple cells\r\n    calculateSlotWidth(start, end, slotDuration) {\r\n        // Calculate duration in minutes\r\n        const startDecimal = this.timeToDecimal(start);\r\n        const endDecimal = this.timeToDecimal(end);\r\n        const durationInHours = endDecimal - startDecimal;\r\n        const durationInMinutes = durationInHours * 60;\r\n        \r\n        // Calculate how many grid cells this should span\r\n        // To avoid floating-point precision issues, round to the nearest integer\r\n        // For a 20-minute duration with 5-minute slots, this should consistently give 4 cells\r\n        const numCells = Math.round(durationInMinutes / slotDuration);\r\n        \r\n        // Log the calculation only in development mode to reduce console noise\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log(`Slot ${start}-${end}: Duration=${durationInMinutes}min, Spans ${numCells} cells`);\r\n        }\r\n        \r\n        // Return the exact number of cells to span (minimum 1)\r\n        return Math.max(1, numCells);\r\n    }\r\n    \r\n    // Format decimal hours to time string\r\n    decimalToTime(decimal) {\r\n        const hours = Math.floor(decimal);\r\n        const minutes = Math.round((decimal - hours) * 60);\r\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    // Get color based on booking probability and booking status\r\n    getProbabilityColor(slot) {\r\n        // If the slot is booked, use a gray color\r\n        if (slot.isBooked) {\r\n            return '#808080'; // Gray color for booked slots\r\n        }\r\n        \r\n        // For unbooked slots, use probability-based colors from the provided palette\r\n        const probability = slot.bookingProbability;\r\n        if (probability === undefined) return 'rgb(0, 147, 146)'; // Default to first color in palette\r\n        \r\n        // Clamp probability between 0 and 1 for safety\r\n        const p = Math.max(0, Math.min(1, probability));\r\n        \r\n        // Define the color palette (from green to red)\r\n        const colorPalette = [\r\n            \"rgb(0, 147, 146)\",    // First green\r\n            \"rgb(57, 177, 133)\",\r\n            \"rgb(156, 203, 134)\",\r\n            \"rgb(233, 226, 156)\",  // Yellow-ish\r\n            \"rgb(238, 180, 121)\",\r\n            \"rgb(232, 132, 113)\",\r\n            \"rgb(207, 89, 126)\"    // Last red\r\n        ];\r\n        \r\n        // Calculate which color to use based on probability\r\n        // p=0 means highest index (most red), p=1 means lowest index (most green)\r\n        const index = Math.floor((1 - p) * (colorPalette.length - 1));\r\n        \r\n        return colorPalette[index];\r\n    }\r\n    \r\n    // Render a single slot rectangle\r\n    renderSlotRectangle(slot) {\r\n        if (!slot) return null;\r\n        \r\n        const { slotDuration } = this.props || {};\r\n        if (!slotDuration) return null;\r\n        \r\n        try {\r\n            // Get the number of cells this slot should span (using cached value if available)\r\n            const numCellsToSpan = this.getSlotWidth(slot, slotDuration);\r\n            \r\n            // We need to make the rectangle fill exactly the grid cells it should span\r\n            // Calculate width to exactly fill the grid cells\r\n            const slotStyle = {\r\n                position: 'absolute',\r\n                top: '2px',\r\n                left: '0',\r\n                height: 'calc(100% - 4px)',\r\n                // For a consistent calculation that accounts for grid lines:\r\n                // - Multiply by 100% to get the percentage width\r\n                // - Add (numCells-1) pixels to account for the internal borders\r\n                width: `calc(${numCellsToSpan * 100}% + ${numCellsToSpan - 1}px)`,\r\n                // Set box-sizing to border-box to include borders in element's dimensions\r\n                boxSizing: 'border-box',\r\n                backgroundColor: this.getProbabilityColor(slot),\r\n                color: 'white',\r\n                borderRadius: '0', // Remove rounded corners\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                cursor: slot.isBooked ? 'not-allowed' : (this.state.isDragging ? 'grabbing' : 'grab'),\r\n                boxShadow: '0 1px 2px rgba(0,0,0,0.1)', // Lighter shadow for simple_white theme\r\n                zIndex: 100,\r\n                transition: 'all 0.15s ease-in-out',\r\n                opacity: slot.isBooked ? 0.8 : 1\r\n            };\r\n            \r\n            const handleStyle = {\r\n                position: 'absolute',\r\n                top: 0,\r\n                bottom: 0,\r\n                width: '4px', // Thinner handles\r\n                cursor: 'ew-resize',\r\n                backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n                transition: 'background-color 0.2s ease'\r\n            };\r\n\r\n            const leftHandleStyle = {\r\n                ...handleStyle,\r\n                left: -2, // Position handle on the edge\r\n                borderRadius: '2px 0 0 2px'\r\n            };\r\n\r\n            const rightHandleStyle = {\r\n                ...handleStyle,\r\n                right: -2, // Position handle on the edge\r\n                borderRadius: '0 2px 2px 0'\r\n            };\r\n\r\n            // Add active state styling for the dragged slot\r\n            const isBeingDragged = this.state.isDragging && \r\n                                  this.state.draggedSlot && \r\n                                  this.state.draggedSlot.id === slot.id;\r\n            \r\n            if (isBeingDragged) {\r\n                // Make the original slot semi-transparent during drag\r\n                slotStyle.opacity = 0.0;\r\n            }\r\n\r\n            return (\r\n                <div \r\n                    key={`slot-${slot.id}`} \r\n                    style={{\r\n                        ...slotStyle,\r\n                        cursor: slot.isBooked ? 'not-allowed' : (this.state.isDragging ? 'grabbing' : 'grab')\r\n                    }}\r\n                    onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        if (!slot.isBooked) {\r\n                            this.handleSlotClick(slot);\r\n                        }\r\n                    }}\r\n                    onMouseDown={(e) => {\r\n                        // Only handle middle section drag\r\n                        if (!slot.isBooked && e.target === e.currentTarget) {\r\n                            this.handleDragStart(e, slot, 'move');\r\n                        }\r\n                    }}\r\n                    onContextMenu={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        if (!slot.isBooked) {\r\n                            this.handleRemoveSlot(slot.id);\r\n                        }\r\n                    }}\r\n                    title={`Time slot: ${slot.start} - ${slot.end}\r\n${slot.isBooked ? 'Status: Booked' : `Booking probability: ${Math.round((slot.bookingProbability || 0.5) * 100)}%`}\r\nRight-click to remove\r\nDrag edges to resize\r\nDrag middle to move`}\r\n                >\r\n                    {!slot.isBooked && (\r\n                        <>\r\n                            <div\r\n                                style={leftHandleStyle}\r\n                                onMouseDown={(e) => this.handleDragStart(e, slot, 'start')}\r\n                                onMouseEnter={(e) => {\r\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\r\n                                }}\r\n                                onMouseLeave={(e) => {\r\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.3)';\r\n                                }}\r\n                            />\r\n                            <div\r\n                                style={rightHandleStyle}\r\n                                onMouseDown={(e) => this.handleDragStart(e, slot, 'end')}\r\n                                onMouseEnter={(e) => {\r\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\r\n                                }}\r\n                                onMouseLeave={(e) => {\r\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.3)';\r\n                                }}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </div>\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Error rendering slot rectangle:\", error);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    // Format time for display (HH:MM)\r\n    formatTime(hour, minute) {\r\n        return `${Math.floor(hour).toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    // Generate time cells for each hour and minute interval\r\n    generateTimeCells(professional, styles) {\r\n        const { startHour, endHour, slotDuration } = this.props;\r\n        const { timeslots, dragPreview, isDragging, dragType } = this.state;\r\n        const slotsPerHour = 60 / slotDuration;\r\n        const cells = [];\r\n        \r\n        // Filter slots for this professional\r\n        const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\r\n        \r\n        // Group slots by their start time\r\n        const slotsByStartTime = {};\r\n        professionalSlots.forEach(slot => {\r\n            const [hour, minute] = slot.start.split(':').map(Number);\r\n            const key = `${hour}:${minute}`;\r\n            slotsByStartTime[key] = slot;\r\n        });\r\n        \r\n        // Check if we are dragging a slot for this professional\r\n        const isPreviewingForThisProfessional = \r\n            dragPreview && dragPreview.professionalId === professional.id;\r\n        \r\n        // Determine which slots should be hidden during drag preview (only the one being dragged)\r\n        const slotBeingDragged = isDragging && isPreviewingForThisProfessional ? dragPreview.id : null;\r\n        \r\n        // For each time cell in the grid\r\n        for (let hour = startHour; hour <= endHour; hour++) {\r\n            for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\r\n                const minute = minuteIndex * slotDuration;\r\n                const timeKey = `${hour}:${minute}`;\r\n                const displayTimeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n                \r\n                // Check if this cell is the start of a time slot\r\n                const slot = slotsByStartTime[timeKey];\r\n                \r\n                const isHovered = this.state.hoveredCell && \r\n                               this.state.hoveredCell.professionalId === professional.id && \r\n                               this.state.hoveredCell.hour === hour &&\r\n                               this.state.hoveredCell.minute === minute;\r\n                \r\n                // Format time for display in the hover tooltip\r\n                const timeDisplay = this.formatTime(hour, minute);\r\n                \r\n                // Create cell style\r\n                const cellStyle = {\r\n                    ...styles.dashGanttTimeCell,\r\n                    backgroundColor: isHovered ? '#fafafa' : 'transparent',\r\n                    borderLeft: minute === 0 ? '1px solid #eaeaea' : 'none',\r\n                    position: 'relative'\r\n                };\r\n                \r\n                // Check if this cell should show the preview\r\n                const cellTimeDecimal = hour + (minute / 60);\r\n                const isInPreviewRange = isPreviewingForThisProfessional && \r\n                                      this.timeToDecimal(dragPreview.start) <= cellTimeDecimal && \r\n                                      this.timeToDecimal(dragPreview.end) > cellTimeDecimal;\r\n                \r\n                // Prepare cell content\r\n                let cellContent;\r\n                \r\n                if (isDragging && slotBeingDragged && slot && slot.id === slotBeingDragged) {\r\n                    // If this is the original cell that's being dragged, fade it out\r\n                    cellContent = (\r\n                        <>\r\n                            <div style={{\r\n                                position: 'absolute',\r\n                                top: '2px',\r\n                                left: '0',\r\n                                height: 'calc(100% - 4px)',\r\n                                width: `calc(${this.getSlotWidth(slot, slotDuration) * 100}% + ${this.getSlotWidth(slot, slotDuration) - 1}px)`,\r\n                                backgroundColor: this.getProbabilityColor(slot),\r\n                                opacity: 0.3,\r\n                                zIndex: 99\r\n                            }} />\r\n                            \r\n                            {isHovered && (\r\n                                <div style={{\r\n                                    position: 'absolute',\r\n                                    bottom: '2px',\r\n                                    right: '2px',\r\n                                    fontSize: '10px',\r\n                                    color: '#666',\r\n                                    pointerEvents: 'none',\r\n                                    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n                                    padding: '1px 3px',\r\n                                    borderRadius: '2px',\r\n                                    zIndex: 200,\r\n                                    border: '1px solid #eaeaea'\r\n                                }}>\r\n                                    {timeDisplay}\r\n                                </div>\r\n                            )}\r\n                        </>\r\n                    );\r\n                } else if (isDragging && isInPreviewRange) {\r\n                    // If this cell is in the preview range, show the preview overlay\r\n                    cellContent = (\r\n                        <>\r\n                            {slot && slot.id !== slotBeingDragged && this.renderSlotRectangle(slot)}\r\n                            \r\n                            <div style={{\r\n                                position: 'absolute',\r\n                                top: '2px',\r\n                                left: '0',\r\n                                right: '0',\r\n                                bottom: '2px',\r\n                                backgroundColor: 'rgba(33, 150, 243, 0.4)',\r\n                                border: dragType === 'move' ? '2px solid #1976D2' : '2px dashed #1976D2',\r\n                                pointerEvents: 'none',\r\n                                zIndex: 95\r\n                            }} />\r\n                            \r\n                            {isHovered && (\r\n                                <div style={{\r\n                                    position: 'absolute',\r\n                                    bottom: '2px',\r\n                                    right: '2px',\r\n                                    fontSize: '10px',\r\n                                    color: '#666',\r\n                                    pointerEvents: 'none',\r\n                                    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n                                    padding: '1px 3px',\r\n                                    borderRadius: '2px',\r\n                                    zIndex: 200,\r\n                                    border: '1px solid #eaeaea'\r\n                                }}>\r\n                                    {timeDisplay}\r\n                                </div>\r\n                            )}\r\n                        </>\r\n                    );\r\n                } else {\r\n                    // Normal case - just show the slot if there is one\r\n                    cellContent = (\r\n                        <>\r\n                            {slot && this.renderSlotRectangle(slot)}\r\n                            \r\n                            {isHovered && (\r\n                                <div style={{\r\n                                    position: 'absolute',\r\n                                    bottom: '2px',\r\n                                    right: '2px',\r\n                                    fontSize: '10px',\r\n                                    color: '#666',\r\n                                    pointerEvents: 'none',\r\n                                    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n                                    padding: '1px 3px',\r\n                                    borderRadius: '2px',\r\n                                    zIndex: 200,\r\n                                    border: '1px solid #eaeaea'\r\n                                }}>\r\n                                    {timeDisplay}\r\n                                </div>\r\n                            )}\r\n                        </>\r\n                    );\r\n                }\r\n                \r\n                // Create and add the cell\r\n                cells.push(\r\n                    <td \r\n                        key={`cell-${professional.id}-${displayTimeKey}`}\r\n                        style={cellStyle}\r\n                        onClick={() => this.handleCreateSlot(professional.id, hour, minute)}\r\n                        onMouseEnter={() => this.handleCellHover(professional.id, hour, minute)}\r\n                        onMouseLeave={this.handleCellLeave}\r\n                        title={`Time: ${timeDisplay}`}\r\n                    >\r\n                        {cellContent}\r\n                    </td>\r\n                );\r\n            }\r\n        }\r\n        \r\n        return cells;\r\n    }\r\n    \r\n    // Get cached slot width or calculate it if not in cache\r\n    getSlotWidth(slot, slotDuration) {\r\n        if (!slot || !slot.start || !slot.end || !slotDuration) {\r\n            return 1; // Default to 1 if any required values are missing\r\n        }\r\n        \r\n        // Create a unique key for this slot and duration\r\n        const cacheKey = `${slot.id}_${slot.start}_${slot.end}_${slotDuration}`;\r\n        \r\n        // If we have a cached value, use it\r\n        if (this.state.slotWidthCache[cacheKey] !== undefined) {\r\n            return this.state.slotWidthCache[cacheKey];\r\n        }\r\n        \r\n        // Otherwise, calculate and cache the value\r\n        const width = this.calculateSlotWidth(slot.start, slot.end, slotDuration);\r\n        \r\n        // Update the cache (without triggering a re-render)\r\n        // We can safely update state directly here since we're not using setState\r\n        // and this won't trigger a re-render - it's just for caching\r\n        this.state.slotWidthCache[cacheKey] = width;\r\n        \r\n        return width;\r\n    }\r\n    \r\n    // Optimize rendering by preventing unnecessary re-renders\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // We need to allow hover state changes to trigger re-renders for hover effects\r\n        // but we can still optimize by not recalculating slot widths\r\n        \r\n        // For any state or prop changes, we should re-render\r\n        // But we can optimize calculations inside the render cycle\r\n        return true;\r\n    }\r\n    \r\n    // Reset cache when props change\r\n    componentDidUpdate(prevProps) {\r\n        // If timeslots change, clear the width cache to ensure correct calculations\r\n        if (prevProps.timeslots !== this.props.timeslots || \r\n            prevProps.slotDuration !== this.props.slotDuration) {\r\n            this.setState({\r\n                slotWidthCache: {}\r\n            });\r\n        }\r\n    }\r\n    \r\n    // Update raw data when timeslots change\r\n    updateRawData(timeslots) {\r\n        const { rawData, onDataChange, setProps } = this.props;\r\n        \r\n        // Create a fresh array for the updated raw data\r\n        // Instead of just creating a copy and modifying it\r\n        let updatedRawData = [];\r\n        \r\n        // First, filter existing data if needed\r\n        if (rawData && rawData.length > 0) {\r\n            // Keep track of which timeslots are still valid\r\n            const validTimeslots = new Set();\r\n            \r\n            // Generate lookup keys for all currently valid timeslots\r\n            timeslots.forEach(slot => {\r\n                const doctorName = this.state.professionals.find(p => p.id === slot.professionalId)?.name;\r\n                if (doctorName) {\r\n                    const key = `${slot.date} ${slot.start}_${doctorName}`;\r\n                    validTimeslots.add(key);\r\n                }\r\n            });\r\n            \r\n            // Only keep raw data items that correspond to slots we still have\r\n            updatedRawData = rawData.filter(item => {\r\n                // Skip items that don't have the required fields\r\n                if (!item.datetime || !item.laakari) return false;\r\n                \r\n                // Create a key to match against our valid timeslots\r\n                const key = `${item.datetime}_${item.laakari}`;\r\n                return validTimeslots.has(key);\r\n            });\r\n        }\r\n        \r\n        // Now process all current timeslots to update or add them\r\n        timeslots.forEach(timeslot => {\r\n            const originalData = timeslot.rawData;\r\n            const doctorName = this.state.professionals.find(p => p.id === timeslot.professionalId)?.name;\r\n            if (!doctorName) return;\r\n            \r\n            // For existing slots\r\n            if (originalData) {\r\n                // Calculate duration from start and end time\r\n                const [startHours, startMinutes] = timeslot.start.split(':').map(Number);\r\n                const [endHours, endMinutes] = timeslot.end.split(':').map(Number);\r\n                \r\n                // Handle crossing midnight if needed\r\n                let durationMinutes;\r\n                if (endHours < startHours || (endHours === startHours && endMinutes < startMinutes)) {\r\n                    // End time is on the next day\r\n                    durationMinutes = ((endHours + 24) * 60 + endMinutes) - (startHours * 60 + startMinutes);\r\n                } else {\r\n                    durationMinutes = (endHours * 60 + endMinutes) - (startHours * 60 + startMinutes);\r\n                }\r\n                \r\n                // Find the corresponding row in the filtered raw data\r\n                const rowIndex = updatedRawData.findIndex(row => \r\n                    row.datetime === `${timeslot.date} ${timeslot.start}` &&\r\n                    row.laakari === doctorName\r\n                );\r\n                \r\n                if (rowIndex !== -1) {\r\n                    // Update the existing row\r\n                    updatedRawData[rowIndex] = {\r\n                        ...updatedRawData[rowIndex],\r\n                        datetime: `${timeslot.date} ${timeslot.start}`,\r\n                        kesto_min: durationMinutes,\r\n                        tyhja: timeslot.isBooked ? 0 : 1,\r\n                        bookingProbability: timeslot.bookingProbability || 0.5\r\n                    };\r\n                } else {\r\n                    // The row was removed during filtering, add it back\r\n                    updatedRawData.push({\r\n                        datetime: `${timeslot.date} ${timeslot.start}`,\r\n                        laakari: doctorName,\r\n                        kesto_min: durationMinutes,\r\n                        tyhja: timeslot.isBooked ? 0 : 1,\r\n                        bookingProbability: timeslot.bookingProbability || 0.5\r\n                    });\r\n                }\r\n            } \r\n            // For new slots\r\n            else if (!originalData && timeslot.start && timeslot.end) {\r\n                // Calculate duration\r\n                const [startHours, startMinutes] = timeslot.start.split(':').map(Number);\r\n                const [endHours, endMinutes] = timeslot.end.split(':').map(Number);\r\n                \r\n                let durationMinutes;\r\n                if (endHours < startHours || (endHours === startHours && endMinutes < startMinutes)) {\r\n                    durationMinutes = ((endHours + 24) * 60 + endMinutes) - (startHours * 60 + startMinutes);\r\n                } else {\r\n                    durationMinutes = (endHours * 60 + endMinutes) - (startHours * 60 + startMinutes);\r\n                }\r\n                \r\n                // Create and add a new row\r\n                updatedRawData.push({\r\n                    datetime: `${timeslot.date} ${timeslot.start}`,\r\n                    laakari: doctorName,\r\n                    kesto_min: durationMinutes,\r\n                    tyhja: timeslot.isBooked ? 0 : 1,\r\n                    bookingProbability: timeslot.bookingProbability || 0.5,\r\n                    toimipiste: \"Default\",\r\n                    aikaryhman: \"Default\",\r\n                    aikaryhma: \"Default\",\r\n                    RESURSSI: \"Default\",\r\n                    specialty: \"Default\",\r\n                    ETNS_A: 1,\r\n                    ETNS_B: 1\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Call the callback if provided\r\n        if (onDataChange) {\r\n            onDataChange(updatedRawData);\r\n        }\r\n\r\n        // Update Dash props if setProps is available\r\n        if (setProps) {\r\n            setProps({ rawData: updatedRawData });\r\n        }\r\n    }\r\n    \r\n    // Add these new methods for handling drag operations\r\n    handleDragStart(e, slot, type) {\r\n        e.stopPropagation();\r\n        if (slot.isBooked) return;\r\n        \r\n        // For move operations, capture the initial mouse position and offset\r\n        const initialMouseX = e.clientX;\r\n        let initialOffset = 0;\r\n        \r\n        if (type === 'move' && this.tableRef.current) {\r\n            const tableRect = this.tableRef.current.getBoundingClientRect();\r\n            // Calculate initial offset based on the position within the slot\r\n            const slotStart = this.timeToDecimal(slot.start) - this.props.startHour;\r\n            const hoursPerDay = this.props.endHour - this.props.startHour;\r\n            const pixelsPerHour = tableRect.width / hoursPerDay;\r\n            \r\n            // Calculate offset from the start of the slot in pixels\r\n            initialOffset = initialMouseX - (tableRect.left + slotStart * pixelsPerHour);\r\n        }\r\n        \r\n        this.setState({\r\n            isDragging: true,\r\n            dragType: type,\r\n            draggedSlot: slot,\r\n            originalSlot: { ...slot },\r\n            dragPreview: { ...slot }, // Start with original slot as preview for smoother transitions\r\n            initialMouseX,\r\n            initialOffset\r\n        });\r\n\r\n        document.addEventListener('mousemove', this.handleDrag);\r\n        document.addEventListener('mouseup', this.handleDragEnd);\r\n    }\r\n\r\n    handleDrag(e) {\r\n        if (!this.state.isDragging || !this.tableRef.current) return;\r\n\r\n        const { slotDuration } = this.props;\r\n        const { draggedSlot, dragType, initialOffset } = this.state;\r\n\r\n        // Get accurate table dimensions\r\n        const tableRect = this.tableRef.current.getBoundingClientRect();\r\n        const hoursPerDay = this.props.endHour - this.props.startHour;\r\n        const pixelsPerHour = tableRect.width / hoursPerDay;\r\n        \r\n        // Calculate relative mouse position with offset adjustment for \"move\" operations\r\n        let relativeX;\r\n        if (dragType === 'move') {\r\n            relativeX = e.clientX - tableRect.left - initialOffset;\r\n        } else {\r\n            relativeX = e.clientX - tableRect.left;\r\n        }\r\n        \r\n        // Constrain the position to the table bounds\r\n        relativeX = Math.max(0, Math.min(relativeX, tableRect.width));\r\n        \r\n        // Convert pixel position to time\r\n        const hoursFromStart = relativeX / pixelsPerHour;\r\n        const totalHours = this.props.startHour + hoursFromStart;\r\n        \r\n        // Calculate hours and minutes\r\n        const hour = Math.floor(totalHours);\r\n        const minute = Math.floor((totalHours - hour) * 60);\r\n        \r\n        // Snap to grid\r\n        const snappedMinute = Math.round(minute / slotDuration) * slotDuration;\r\n        const newTime = `${Math.min(23, Math.max(0, hour)).toString().padStart(2, '0')}:${snappedMinute.toString().padStart(2, '0')}`;\r\n        \r\n        // Create a copy of the slot to update\r\n        const updatedSlot = { ...draggedSlot };\r\n        \r\n        if (dragType === 'move') {\r\n            // For moving, calculate duration and preserve it\r\n            const startDecimal = this.timeToDecimal(draggedSlot.start);\r\n            const endDecimal = this.timeToDecimal(draggedSlot.end);\r\n            const duration = endDecimal - startDecimal;\r\n            \r\n            // Set new start time based on grid-snapped position\r\n            updatedSlot.start = newTime;\r\n            \r\n            // Calculate new end time by adding the duration\r\n            const newEndDecimal = this.timeToDecimal(newTime) + duration;\r\n            updatedSlot.end = this.decimalToTime(newEndDecimal);\r\n        } else if (dragType === 'start') {\r\n            // For resizing the start, ensure it doesn't go past the end\r\n            const endDecimal = this.timeToDecimal(draggedSlot.end);\r\n            const newStartDecimal = this.timeToDecimal(newTime);\r\n            \r\n            if (newStartDecimal < endDecimal) {\r\n                updatedSlot.start = newTime;\r\n            } else {\r\n                // If trying to drag start beyond end, cap it\r\n                updatedSlot.start = this.decimalToTime(endDecimal - (slotDuration / 60));\r\n            }\r\n        } else if (dragType === 'end') {\r\n            // For resizing the end, ensure it doesn't go before the start\r\n            const startDecimal = this.timeToDecimal(draggedSlot.start);\r\n            const newEndDecimal = this.timeToDecimal(newTime);\r\n            \r\n            if (newEndDecimal > startDecimal) {\r\n                updatedSlot.end = newTime;\r\n            } else {\r\n                // If trying to drag end before start, cap it\r\n                updatedSlot.end = this.decimalToTime(startDecimal + (slotDuration / 60));\r\n            }\r\n        }\r\n        \r\n        this.setState({ dragPreview: updatedSlot });\r\n    }\r\n\r\n    handleDragEnd() {\r\n        const { isDragging, dragPreview, originalSlot } = this.state;\r\n        if (!isDragging) return;\r\n\r\n        document.removeEventListener('mousemove', this.handleDrag);\r\n        document.removeEventListener('mouseup', this.handleDragEnd);\r\n\r\n        if (dragPreview) {\r\n            const startTime = this.timeToDecimal(dragPreview.start);\r\n            const endTime = this.timeToDecimal(dragPreview.end);\r\n\r\n            if (endTime <= startTime) {\r\n                // Invalid time range, revert to original\r\n                this.setState({\r\n                    isDragging: false,\r\n                    dragType: null,\r\n                    draggedSlot: null,\r\n                    originalSlot: null,\r\n                    dragPreview: null\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Update the slot with preview values\r\n            const { timeslots } = this.state;\r\n            const updatedTimeslots = timeslots.map(slot =>\r\n                slot.id === dragPreview.id ? dragPreview : slot\r\n            );\r\n\r\n            this.setState({\r\n                timeslots: updatedTimeslots,\r\n                isDragging: false,\r\n                dragType: null,\r\n                draggedSlot: null,\r\n                originalSlot: null,\r\n                dragPreview: null\r\n            });\r\n\r\n            this.updateRawData(updatedTimeslots);\r\n        }\r\n    }\r\n    \r\n    // 1. First, add componentWillUnmount to clean up event listeners\r\n    componentWillUnmount() {\r\n        // Clean up event listeners\r\n        document.removeEventListener('mousemove', this.handleDrag);\r\n        document.removeEventListener('mouseup', this.handleDragEnd);\r\n    }\r\n    \r\n    render() {\r\n        const { id, date, startHour, endHour, slotDuration, backgroundColor } = this.props;\r\n        const { professionals, timeslots } = this.state;\r\n        \r\n        // Calculate number of time slots per hour (e.g., 12 for 5-minute slots)\r\n        const slotsPerHour = 60 / slotDuration;\r\n        \r\n        // Calculate total number of slots in the timeline\r\n        const totalSlots = (endHour - startHour) * slotsPerHour;\r\n        \r\n        // Calculate a reasonable cell width in pixels - each hour should be at least 60px wide\r\n        const hourWidth = 60;\r\n        const cellWidth = hourWidth / slotsPerHour;\r\n        \r\n        const styles = {\r\n            dashGantt: {\r\n                fontFamily: 'Arial, sans-serif',\r\n                margin: '20px 0'\r\n            },\r\n            dashGanttHeader: {\r\n                marginBottom: '10px'\r\n            },\r\n            dashGanttContainer: {\r\n                border: '1px solid #e0e0e0', // Even lighter border for simple_white theme\r\n                borderRadius: '4px', // Less rounded corners for clean look\r\n                overflow: 'hidden',\r\n                overflowX: 'auto',\r\n                boxShadow: 'none' // No shadow for minimalist look\r\n            },\r\n            dashGanttTable: {\r\n                width: '100%',\r\n                borderCollapse: 'collapse',\r\n                tableLayout: 'fixed',\r\n                // Each hour is at least hourWidth pixels, plus professional column\r\n                minWidth: `${150 + (endHour - startHour) * hourWidth}px`\r\n            },\r\n            dashGanttHeaderRow: {\r\n                backgroundColor: backgroundColor || '#ffffff' // White background like simple_white theme\r\n            },\r\n            dashGanttHeaderCell: {\r\n                padding: '12px 8px', \r\n                textAlign: 'center',\r\n                fontWeight: '500', // Medium weight for cleaner look\r\n                borderRight: '1px solid #eaeaea', // Very light border\r\n                borderBottom: '1px solid #eaeaea',\r\n                fontSize: '14px',\r\n                color: '#444' // Darker text for better readability\r\n            },\r\n            dashGanttFirstHeaderCell: {\r\n                width: '150px',\r\n                borderRight: '1px solid #eaeaea',\r\n                borderBottom: '1px solid #eaeaea'\r\n            },\r\n            dashGanttRow: {\r\n                height: '60px'\r\n            },\r\n            dashGanttProfessionalCell: {\r\n                width: '150px',\r\n                padding: '8px',\r\n                borderRight: '1px solid #eaeaea',\r\n                borderBottom: '1px solid #eaeaea',\r\n                backgroundColor: backgroundColor || '#ffffff', // Use same background color as headers\r\n                verticalAlign: 'middle',\r\n                fontWeight: '500',\r\n                fontSize: '14px',\r\n                color: '#444'\r\n            },\r\n            dashGanttTimeCell: {\r\n                position: 'relative',\r\n                padding: '0',\r\n                borderRight: '1px solid #f5f5f5', // Very subtle grid lines\r\n                borderBottom: '1px solid #eaeaea',\r\n                cursor: 'pointer',\r\n                height: '60px',\r\n                // We're setting a minimum width based on a reasonable cell size\r\n                minWidth: '5px', \r\n                width: `${100 / totalSlots}%`,\r\n                boxSizing: 'border-box',\r\n                transition: 'background-color 0.2s ease'\r\n            },\r\n            dashGanttSlot: {\r\n                position: 'absolute',\r\n                top: '0',\r\n                height: '100%',\r\n                backgroundColor: '#4CAF50',\r\n                color: 'white',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                cursor: 'pointer',\r\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)', // Lighter shadow for cleaner look\r\n                zIndex: 10,\r\n                overflow: 'hidden'\r\n            },\r\n            dashGanttProbability: {\r\n                fontSize: '14px',\r\n                fontWeight: '500'\r\n            },\r\n            dashGanttEditor: {\r\n                marginTop: '20px',\r\n                padding: '15px',\r\n                border: '1px solid #eaeaea', // Lighter border for simple_white\r\n                borderRadius: '4px',\r\n                backgroundColor: '#ffffff' // Pure white background\r\n            },\r\n            dashGanttForm: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: '10px'\r\n            },\r\n            dashGanttFormGroup: {\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n            },\r\n            dashGanttFormGroupLabel: {\r\n                width: '100px',\r\n                marginRight: '10px',\r\n                color: '#444',\r\n                fontSize: '14px'\r\n            },\r\n            dashGanttFormGroupInput: {\r\n                flex: 1,\r\n                padding: '8px',\r\n                border: '1px solid #eaeaea',\r\n                borderRadius: '4px',\r\n                fontSize: '14px'\r\n            },\r\n            dashGanttFormActions: {\r\n                display: 'flex',\r\n                gap: '10px',\r\n                marginTop: '10px'\r\n            },\r\n            dashGanttFormActionsButton: {\r\n                padding: '8px 15px',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer',\r\n                fontWeight: '500',\r\n                fontSize: '14px'\r\n            },\r\n            dashGanttFormActionsSave: {\r\n                backgroundColor: '#2196F3', // Using blue for primary action\r\n                color: 'white'\r\n            },\r\n            dashGanttFormActionsCancel: {\r\n                backgroundColor: '#f5f5f5',\r\n                color: '#333'\r\n            },\r\n            dashGanttFormActionsRemove: {\r\n                backgroundColor: '#f44336',\r\n                color: 'white'\r\n            }\r\n        };\r\n        \r\n        // Generate hour labels\r\n        const hourLabels = [];\r\n        for (let hour = startHour; hour <= endHour; hour++) {\r\n            const displayHour = hour % 24; // Handle 24-hour format\r\n            const isPM = displayHour >= 12;\r\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\r\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\r\n            hourLabels.push(timeLabel);\r\n        }\r\n        \r\n        // Generate hour header cells\r\n        const generateHourHeaderCells = () => {\r\n            const cells = [];\r\n            \r\n            for (let hour = startHour; hour <= endHour; hour++) {\r\n                // Use 24-hour format (European style)\r\n                // Ensure we're not exceeding 24 hours (handle edge case for endHour=24)\r\n                const displayHour = hour === 24 ? 24 : hour % 24;\r\n                // Format as 2-digit hour (e.g., \"06\" instead of \"6\")\r\n                const timeLabel = `${displayHour.toString().padStart(2, '0')}:00`;\r\n                \r\n                cells.push(\r\n                    <th \r\n                        key={`header-${hour}`} \r\n                        colSpan={slotsPerHour}\r\n                        style={styles.dashGanttHeaderCell}\r\n                    >\r\n                        {timeLabel}\r\n                    </th>\r\n                );\r\n            }\r\n            \r\n            return cells;\r\n        };\r\n\r\n        return (\r\n            <div id={id} style={styles.dashGantt}>\r\n                <div style={styles.dashGanttHeader}>\r\n                    <h2>Schedule for {date}</h2>\r\n                </div>\r\n                <div style={styles.dashGanttContainer}>\r\n                    <table ref={this.tableRef} style={styles.dashGanttTable}>\r\n                        <thead>\r\n                            <tr style={styles.dashGanttHeaderRow}>\r\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\r\n                                {generateHourHeaderCells()}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {professionals.map(professional => (\r\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\r\n                                    <td style={styles.dashGanttProfessionalCell}>\r\n                                        {professional.name}\r\n                                    </td>\r\n                                    {this.generateTimeCells(professional, styles)}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                \r\n                {/* Render slot editor */}\r\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\r\n                    <div style={styles.dashGanttEditor}>\r\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\r\n                        <div style={styles.dashGanttForm}>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\r\n                                <select \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \r\n                                    onChange={e => {\r\n                                        const professionalId = parseInt(e.target.value);\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\r\n                                        }\r\n                                    }}\r\n                                    disabled={!this.state.isAddingSlot}\r\n                                >\r\n                                    {professionals.map(p => (\r\n                                        <option key={p.id} value={p.id}>{p.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \r\n                                    onChange={e => {\r\n                                        const start = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormGroup}>\r\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\r\n                                <input \r\n                                    type=\"time\" \r\n                                    style={styles.dashGanttFormGroupInput}\r\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \r\n                                    onChange={e => {\r\n                                        const end = e.target.value;\r\n                                        if (this.state.isAddingSlot) {\r\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\r\n                                        } else {\r\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div style={styles.dashGanttFormActions}>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\r\n                                    onClick={this.handleSaveSlot}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                                <button \r\n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\r\n                                    onClick={this.handleCancelEdit}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                {!this.state.isAddingSlot && (\r\n                                    <button \r\n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\r\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\r\n                                    >\r\n                                        Remove\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDashGantt.defaultProps = {\r\n    rawData: [],\r\n    date: new Date().toISOString().split('T')[0],\r\n    startHour: 6,\r\n    endHour: 24,\r\n    slotDuration: 20,\r\n    backgroundColor: '#f5f5f5',\r\n    onDataChange: null\r\n};\r\n\r\nDashGantt.propTypes = {\r\n    id: PropTypes.string,\r\n    rawData: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            datetime: PropTypes.string.isRequired,\r\n            laakari: PropTypes.string.isRequired,\r\n            kesto_min: PropTypes.number.isRequired,\r\n            tyhja: PropTypes.number.isRequired\r\n        })\r\n    ),\r\n    date: PropTypes.string,\r\n    startHour: PropTypes.number,\r\n    endHour: PropTypes.number,\r\n    slotDuration: PropTypes.number,\r\n    backgroundColor: PropTypes.string,\r\n    onDataChange: PropTypes.func,\r\n    setProps: PropTypes.func\r\n};\r\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","tableRef","React","rawData","date","_DashGantt$transformD","transformData","Date","toISOString","split","professionals","timeslots","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","slotWidthCache","isDragging","dragSide","draggedSlot","originalSlot","dragPreview","dragType","handleSlotClick","bind","handleAddSlot","handleCreateSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","renderSlotRectangle","generateTimeCells","formatTime","timeToDecimal","calculateSlotWidth","getSlotWidth","updateRawData","handleDragStart","handleDrag","handleDragEnd","_inherits","key","value","_this$props","this","_DashGantt$transformD2","setState","slot","hour","minute","currentHover","_this$state","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","totalEndMinutes","endHour","endMinutes","endTime","slotToAdd","id","length","max","apply","_toConsumableArray","map","bookingProbability","isBooked","appointmentType","resource","updatedTimeslots","slotDuration","endTimeInMinutes","slotId","filter","_this$state2","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","Number","startDecimal","durationInMinutes","numCells","round","decimal","hours","minutes","probability","undefined","p","min","colorPalette","_this2","numCellsToSpan","slotStyle","position","top","left","height","width","boxSizing","backgroundColor","getProbabilityColor","color","borderRadius","display","justifyContent","alignItems","cursor","boxShadow","zIndex","transition","opacity","handleStyle","bottom","leftHandleStyle","rightHandleStyle","right","style","onClick","e","stopPropagation","onMouseDown","target","currentTarget","onContextMenu","preventDefault","title","onMouseEnter","onMouseLeave","error","console","professional","styles","_this3","_this$props2","_this$state3","slotsPerHour","cells","professionalSlots","slotsByStartTime","forEach","_slot$start$split$map2","isPreviewingForThisProfessional","slotBeingDragged","_loop","_loop2","cellContent","minuteIndex","timeKey","displayTimeKey","isHovered","timeDisplay","cellStyle","dashGanttTimeCell","borderLeft","cellTimeDecimal","isInPreviewRange","fontSize","pointerEvents","padding","border","push","cacheKey","nextProps","nextState","prevProps","_this4","_this$props3","onDataChange","setProps","updatedRawData","validTimeslots","Set","_this4$state$professi","doctorName","find","name","add","item","datetime","laakari","has","timeslot","_this4$state$professi2","originalData","durationMinutes","_timeslot$start$split2","startHours","_timeslot$end$split$m2","endHours","rowIndex","findIndex","row","kesto_min","tyhja","_timeslot$start$split4","_timeslot$end$split$m4","toimipiste","aikaryhman","aikaryhma","RESURSSI","specialty","ETNS_A","ETNS_B","type","initialMouseX","clientX","initialOffset","current","tableRect","getBoundingClientRect","slotStart","hoursPerDay","pixelsPerHour","document","addEventListener","relativeX","_this$state4","hoursFromStart","totalHours","snappedMinute","newTime","updatedSlot","duration","newEndDecimal","decimalToTime","endDecimal","newStartDecimal","_this$state5","removeEventListener","_this5","_this$props4","_this$state6","totalSlots","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","overflow","overflowX","dashGanttTable","borderCollapse","tableLayout","minWidth","dashGanttHeaderRow","dashGanttHeaderCell","textAlign","fontWeight","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","dashGanttProfessionalCell","verticalAlign","dashGanttSlot","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","ref","colSpan","generateHourHeaderCells","onChange","parseInt","disabled","filteredData","Array","from","doctor","idx","doctorToId","Object","fromEntries","_row$datetime$split2","time","_time$split$map2","startDate","setHours","endDate","getTime","getHours","getMinutes","prevState","_DashGantt$transformD3","Component","defaultProps","propTypes","PropTypes","isRequired"],"sourceRoot":""}