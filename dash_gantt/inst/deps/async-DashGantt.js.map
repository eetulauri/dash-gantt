{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * DashGantt is a Gantt chart component for scheduling.\n * It displays professionals vertically and time horizontally.\n * Users can add, modify, and remove timeslots for each professional.\n * The component outputs data that can be used in a prediction model.\n */\nexport default class DashGantt extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            },\n            hoveredCell: null\n        };\n        \n        // Bind methods\n        this.handleSlotClick = this.handleSlotClick.bind(this);\n        this.handleAddSlot = this.handleAddSlot.bind(this);\n        this.handleCreateSlot = this.handleCreateSlot.bind(this);\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\n        this.handleCellHover = this.handleCellHover.bind(this);\n        this.handleCellLeave = this.handleCellLeave.bind(this);\n        this.renderSlotRectangle = this.renderSlotRectangle.bind(this);\n        this.generateTimeCells = this.generateTimeCells.bind(this);\n        this.formatTime = this.formatTime.bind(this);\n        this.timeToDecimal = this.timeToDecimal.bind(this);\n        this.calculateSlotWidth = this.calculateSlotWidth.bind(this);\n    }\n    \n    // Handle clicking on a timeslot\n    handleSlotClick(slot) {\n        this.setState({\n            selectedSlot: slot,\n            isAddingSlot: false\n        });\n    }\n    \n    // Handle cell hover\n    handleCellHover(professionalId, hour, minute) {\n        this.setState({\n            hoveredCell: { professionalId, hour, minute }\n        });\n    }\n    \n    // Handle cell leave\n    handleCellLeave() {\n        this.setState({\n            hoveredCell: null\n        });\n    }\n    \n    // Handle creating a new timeslot with a single click\n    handleCreateSlot(professionalId, hour, minute) {\n        const { timeslots, date, setProps } = this.props;\n        \n        // Calculate start and end times\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        // Always create a 20-minute slot regardless of slotDuration prop\n        const slotDurationMinutes = 20; // Fixed 20-minute duration for created slots\n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDurationMinutes;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        // Create new slot\n        const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n        const slotToAdd = {\n            id: newId,\n            professionalId: professionalId,\n            start: startTime,\n            end: endTime,\n            date: date,\n            bookingProbability: 0.5 // Default probability, can be updated later by prediction model\n        };\n        \n        // Update timeslots\n        const updatedTimeslots = [...timeslots, slotToAdd];\n        setProps({ timeslots: updatedTimeslots });\n    }\n    \n    // Handle adding a new timeslot\n    handleAddSlot(professionalId, hour, minute) {\n        const { slotDuration } = this.props;\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        this.setState({\n            isAddingSlot: true,\n            selectedSlot: null,\n            newSlot: {\n                professionalId,\n                start: startTime,\n                end: endTime\n            }\n        });\n    }\n    \n    // Handle removing a timeslot\n    handleRemoveSlot(slotId) {\n        const { timeslots, setProps } = this.props;\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({ selectedSlot: null });\n    }\n    \n    // Handle saving a timeslot (new or edited)\n    handleSaveSlot() {\n        const { timeslots, date, setProps } = this.props;\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\n        \n        let updatedTimeslots;\n        \n        if (isAddingSlot) {\n            // Add new slot\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n            const slotToAdd = {\n                id: newId,\n                professionalId: newSlot.professionalId,\n                start: newSlot.start,\n                end: newSlot.end,\n                date: date\n            };\n            \n            updatedTimeslots = [...timeslots, slotToAdd];\n        } else {\n            // Update existing slot\n            updatedTimeslots = timeslots.map(slot => \n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\n            );\n        }\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Handle canceling edit or add operation\n    handleCancelEdit() {\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Convert time string to decimal hours\n    timeToDecimal(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours + (minutes / 60);\n    }\n    \n    // Calculate the width of a slot that should span multiple cells\n    calculateSlotWidth(start, end, slotDuration) {\n        // Calculate duration in minutes\n        const startDecimal = this.timeToDecimal(start);\n        const endDecimal = this.timeToDecimal(end);\n        const durationInHours = endDecimal - startDecimal;\n        const durationInMinutes = durationInHours * 60;\n        \n        // Calculate how many grid cells this should span (ensure it's at least 1)\n        const numCells = Math.max(1, Math.round(durationInMinutes / slotDuration));\n        \n        // Return the number of cells to span\n        return numCells;\n    }\n    \n    // Format decimal hours to time string\n    decimalToTime(decimal) {\n        const hours = Math.floor(decimal);\n        const minutes = Math.round((decimal - hours) * 60);\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    // Get color based on booking probability\n    getProbabilityColor(probability) {\n        if (probability === undefined) return '#4CAF50'; // Default green\n        \n        if (probability >= 0.7) return '#4CAF50'; // Green for high probability\n        if (probability >= 0.4) return '#FFC107'; // Yellow for medium probability\n        return '#F44336'; // Red for low probability\n    }\n    \n    // Render a single slot rectangle\n    renderSlotRectangle(slot) {\n        const { slotDuration } = this.props;\n        \n        // Calculate the number of cells this slot should span\n        const numCellsToSpan = this.calculateSlotWidth(slot.start, slot.end, slotDuration);\n        \n        // For a multi-cell spanning slot, we need to account for borders\n        // We do this by making the width exactly span all cells including their borders\n        const slotStyle = {\n            position: 'absolute',\n            top: '2px',\n            left: '0',\n            height: 'calc(100% - 4px)',\n            // Set width to exactly span the right number of cells\n            // For n cells, we need n*100% width plus (n-1) border widths\n            width: `calc(${numCellsToSpan * 100}% - 1px)`,\n            backgroundColor: this.getProbabilityColor(slot.bookingProbability),\n            color: 'white',\n            borderRadius: '4px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            cursor: 'pointer',\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n            zIndex: 100\n        };\n        \n        const probabilityStyle = {\n            fontSize: '14px',\n            fontWeight: 'bold'\n        };\n        \n        return (\n            <div \n                key={`slot-${slot.id}`} \n                style={slotStyle}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    this.handleSlotClick(slot);\n                }}\n                title={`Time slot: ${slot.start} - ${slot.end} (Booking probability: ${Math.round(slot.bookingProbability * 100)}%)`}\n            >\n                {slot.bookingProbability !== undefined && (\n                    <div style={probabilityStyle}>\n                        {Math.round(slot.bookingProbability * 100)}%\n                    </div>\n                )}\n            </div>\n        );\n    }\n    \n    // Format time for display (HH:MM)\n    formatTime(hour, minute) {\n        return `${Math.floor(hour).toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n    }\n    \n    // Generate time cells for each hour and minute interval\n    generateTimeCells(professional, styles) {\n        const { timeslots, startHour, endHour, slotDuration } = this.props;\n        const slotsPerHour = 60 / slotDuration;\n        const cells = [];\n        const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\n        \n        // Group slots by their start time for more efficient lookup\n        const slotsByStartTime = {};\n        professionalSlots.forEach(slot => {\n            const [hour, minute] = slot.start.split(':').map(Number);\n            const key = `${hour}:${minute}`;\n            slotsByStartTime[key] = slot;\n        });\n        \n        // Iterate through each time slot for this professional\n        for (let hour = startHour; hour <= endHour; hour++) {\n            for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\n                const minute = minuteIndex * slotDuration;\n                const timeKey = `${hour}:${minute}`;\n                const displayTimeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                \n                // Check if this cell is the start of a time slot\n                const slot = slotsByStartTime[timeKey];\n                \n                const isHovered = this.state.hoveredCell && \n                                this.state.hoveredCell.professionalId === professional.id && \n                                this.state.hoveredCell.hour === hour &&\n                                this.state.hoveredCell.minute === minute;\n                \n                // Format time for display in the hover tooltip\n                const timeDisplay = this.formatTime(hour, minute);\n                \n                // Adjust the cell's border style to create a grid-like appearance\n                const cellStyle = {\n                    ...styles.dashGanttTimeCell,\n                    backgroundColor: isHovered ? '#f0f0f0' : 'transparent',\n                    borderLeft: minute === 0 ? '1px solid #ccc' : '1px solid #eee',\n                    position: 'relative'\n                };\n                \n                // Create the cell for this time slot\n                const cell = (\n                    <td \n                        key={`cell-${professional.id}-${displayTimeKey}`} \n                        style={cellStyle}\n                        onClick={() => this.handleCreateSlot(professional.id, hour, minute)}\n                        onMouseEnter={() => this.handleCellHover(professional.id, hour, minute)}\n                        onMouseLeave={this.handleCellLeave}\n                        title={`Time: ${timeDisplay}`}\n                    >\n                        {slot && this.renderSlotRectangle(slot)}\n                        \n                        {/* Show time on hover */}\n                        {isHovered && (\n                            <div style={{\n                                position: 'absolute',\n                                bottom: '2px',\n                                right: '2px',\n                                fontSize: '10px',\n                                color: '#666',\n                                pointerEvents: 'none',\n                                backgroundColor: 'rgba(255, 255, 255, 0.7)',\n                                padding: '1px 3px',\n                                borderRadius: '2px',\n                                zIndex: 200\n                            }}>\n                                {timeDisplay}\n                            </div>\n                        )}\n                    </td>\n                );\n                \n                cells.push(cell);\n            }\n        }\n        \n        return cells;\n    }\n    \n    render() {\n        const { id, professionals, date, timeslots, startHour, endHour, slotDuration } = this.props;\n        \n        // Calculate number of time slots per hour (e.g., 3 for 20-minute slots)\n        const slotsPerHour = 60 / slotDuration;\n        \n        // Calculate total number of slots in the timeline\n        const totalSlots = (endHour - startHour) * slotsPerHour;\n        \n        const styles = {\n            dashGantt: {\n                fontFamily: 'Arial, sans-serif',\n                margin: '20px 0'\n            },\n            dashGanttHeader: {\n                marginBottom: '10px'\n            },\n            dashGanttContainer: {\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                overflow: 'hidden',\n                overflowX: 'auto'\n            },\n            dashGanttTable: {\n                width: '100%',\n                borderCollapse: 'collapse',\n                tableLayout: 'fixed'\n            },\n            dashGanttHeaderRow: {\n                backgroundColor: '#f5f5f5'\n            },\n            dashGanttHeaderCell: {\n                padding: '8px',\n                textAlign: 'center',\n                fontWeight: 'bold',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc'\n            },\n            dashGanttFirstHeaderCell: {\n                width: '150px',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc'\n            },\n            dashGanttRow: {\n                height: '60px'\n            },\n            dashGanttProfessionalCell: {\n                width: '150px',\n                padding: '8px',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc',\n                backgroundColor: '#f9f9f9',\n                verticalAlign: 'middle'\n            },\n            dashGanttTimeCell: {\n                position: 'relative',\n                padding: '0',\n                borderRight: '0',  // We'll set borders individually in the cells\n                borderBottom: '1px solid #ccc',\n                cursor: 'pointer',\n                height: '60px',\n                width: `${100 / totalSlots}%` // Equal width for each time slot\n            },\n            dashGanttSlot: {\n                position: 'absolute',\n                top: '0',\n                height: '100%',\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                borderRadius: '4px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: 'pointer',\n                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                zIndex: 10,\n                overflow: 'hidden'\n            },\n            dashGanttProbability: {\n                fontSize: '14px',\n                fontWeight: 'bold'\n            },\n            dashGanttEditor: {\n                marginTop: '20px',\n                padding: '15px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                backgroundColor: '#f9f9f9'\n            },\n            dashGanttForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '10px'\n            },\n            dashGanttFormGroup: {\n                display: 'flex',\n                alignItems: 'center'\n            },\n            dashGanttFormGroupLabel: {\n                width: '100px',\n                marginRight: '10px'\n            },\n            dashGanttFormGroupInput: {\n                flex: 1,\n                padding: '8px',\n                border: '1px solid #ccc',\n                borderRadius: '4px'\n            },\n            dashGanttFormActions: {\n                display: 'flex',\n                gap: '10px',\n                marginTop: '10px'\n            },\n            dashGanttFormActionsButton: {\n                padding: '8px 15px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontWeight: 'bold'\n            },\n            dashGanttFormActionsSave: {\n                backgroundColor: '#4CAF50',\n                color: 'white'\n            },\n            dashGanttFormActionsCancel: {\n                backgroundColor: '#f5f5f5'\n            },\n            dashGanttFormActionsRemove: {\n                backgroundColor: '#f44336',\n                color: 'white'\n            }\n        };\n        \n        // Generate hour labels\n        const hourLabels = [];\n        for (let hour = startHour; hour <= endHour; hour++) {\n            const displayHour = hour % 24; // Handle 24-hour format\n            const isPM = displayHour >= 12;\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n            hourLabels.push(timeLabel);\n        }\n        \n        // Generate hour header cells\n        const generateHourHeaderCells = () => {\n            const cells = [];\n            \n            for (let hour = startHour; hour <= endHour; hour++) {\n                const displayHour = hour % 24; // Handle 24-hour format\n                const isPM = displayHour >= 12;\n                const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n                const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n                \n                cells.push(\n                    <th \n                        key={`header-${hour}`} \n                        colSpan={slotsPerHour}\n                        style={styles.dashGanttHeaderCell}\n                    >\n                        {timeLabel}\n                    </th>\n                );\n            }\n            \n            return cells;\n        };\n\n        return (\n            <div id={id} style={styles.dashGantt}>\n                <div style={styles.dashGanttHeader}>\n                    <h2>Schedule for {date}</h2>\n                </div>\n                <div style={styles.dashGanttContainer}>\n                    <table style={styles.dashGanttTable}>\n                        <thead>\n                            <tr style={styles.dashGanttHeaderRow}>\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\n                                {generateHourHeaderCells()}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {professionals.map(professional => (\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\n                                    <td style={styles.dashGanttProfessionalCell}>\n                                        {professional.name}\n                                    </td>\n                                    {this.generateTimeCells(professional, styles)}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                \n                {/* Render slot editor */}\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\n                    <div style={styles.dashGanttEditor}>\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\n                        <div style={styles.dashGanttForm}>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\n                                <select \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \n                                    onChange={e => {\n                                        const professionalId = parseInt(e.target.value);\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\n                                        }\n                                    }}\n                                    disabled={!this.state.isAddingSlot}\n                                >\n                                    {professionals.map(p => (\n                                        <option key={p.id} value={p.id}>{p.name}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \n                                    onChange={e => {\n                                        const start = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \n                                    onChange={e => {\n                                        const end = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormActions}>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\n                                    onClick={this.handleSaveSlot}\n                                >\n                                    Save\n                                </button>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\n                                    onClick={this.handleCancelEdit}\n                                >\n                                    Cancel\n                                </button>\n                                {!this.state.isAddingSlot && (\n                                    <button \n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nDashGantt.defaultProps = {\n    timeslots: [],\n    date: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format\n    startHour: 6, // 6:00 AM\n    endHour: 24, // Midnight\n    slotDuration: 20, // 20 minutes\n};\n\nDashGantt.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of professionals to display in the Gantt chart.\n     * Each professional should have an id and name.\n     */\n    professionals: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n\n    /**\n     * List of timeslots to display in the Gantt chart.\n     * Each timeslot should have an id, professionalId, start time, end time, and date.\n     */\n    timeslots: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            professionalId: PropTypes.number.isRequired,\n            start: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            end: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            date: PropTypes.string.isRequired, // Format: \"YYYY-MM-DD\"\n            bookingProbability: PropTypes.number // Optional: probability of booking (0-1)\n        })\n    ),\n\n    /**\n     * The date to display in the Gantt chart (YYYY-MM-DD).\n     */\n    date: PropTypes.string,\n\n    /**\n     * The start hour of the day (e.g., 6 for 6:00 AM).\n     */\n    startHour: PropTypes.number,\n\n    /**\n     * The end hour of the day (e.g., 24 for midnight).\n     */\n    endHour: PropTypes.number,\n\n    /**\n     * The duration of each slot in minutes.\n     */\n    slotDuration: PropTypes.number,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","handleSlotClick","bind","handleAddSlot","handleCreateSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","renderSlotRectangle","generateTimeCells","formatTime","timeToDecimal","calculateSlotWidth","_inherits","key","value","slot","this","setState","hour","minute","_this$props","timeslots","date","setProps","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","endTimeInMinutes","endHour","endMinutes","endTime","slotToAdd","id","length","max","apply","_toConsumableArray","map","bookingProbability","slotDuration","slotId","_this$props2","filter","updatedTimeslots","_this$props3","_this$state","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","split","Number","startDecimal","durationInMinutes","round","decimal","hours","minutes","probability","undefined","_this2","numCellsToSpan","slotStyle","position","top","left","height","width","backgroundColor","getProbabilityColor","color","borderRadius","display","justifyContent","alignItems","cursor","boxShadow","zIndex","React","style","onClick","e","stopPropagation","title","fontSize","fontWeight","professional","styles","_this3","_this$props4","slotsPerHour","cells","professionalSlots","slotsByStartTime","forEach","_slot$start$split$map2","_loop","_loop2","minuteIndex","timeKey","displayTimeKey","isHovered","timeDisplay","cellStyle","dashGanttTimeCell","borderLeft","cell","onMouseEnter","onMouseLeave","bottom","right","pointerEvents","padding","push","_this4","_this$props5","professionals","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","border","overflow","overflowX","dashGanttTable","borderCollapse","tableLayout","dashGanttHeaderRow","dashGanttHeaderCell","textAlign","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","dashGanttProfessionalCell","verticalAlign","dashGanttSlot","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","colSpan","generateHourHeaderCells","name","onChange","parseInt","target","disabled","p","type","Component","defaultProps","Date","toISOString","propTypes","PropTypes","isRequired"],"sourceRoot":""}