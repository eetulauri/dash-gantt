{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * DashGantt is a Gantt chart component for scheduling.\n * It displays professionals vertically and time horizontally.\n * Users can add, modify, and remove timeslots for each professional.\n * The component outputs data that can be used in a prediction model.\n */\nexport default class DashGantt extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            },\n            hoveredCell: null\n        };\n        \n        // Bind methods\n        this.handleSlotClick = this.handleSlotClick.bind(this);\n        this.handleAddSlot = this.handleAddSlot.bind(this);\n        this.handleCreateSlot = this.handleCreateSlot.bind(this);\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\n        this.handleCellHover = this.handleCellHover.bind(this);\n        this.handleCellLeave = this.handleCellLeave.bind(this);\n        this.renderSlotRectangle = this.renderSlotRectangle.bind(this);\n    }\n    \n    // Handle clicking on a timeslot\n    handleSlotClick(slot) {\n        this.setState({\n            selectedSlot: slot,\n            isAddingSlot: false\n        });\n    }\n    \n    // Handle cell hover\n    handleCellHover(professionalId, hour, minute) {\n        this.setState({\n            hoveredCell: { professionalId, hour, minute }\n        });\n    }\n    \n    // Handle cell leave\n    handleCellLeave() {\n        this.setState({\n            hoveredCell: null\n        });\n    }\n    \n    // Handle creating a new timeslot with a single click\n    handleCreateSlot(professionalId, hour, minute) {\n        const { timeslots, date, setProps } = this.props;\n        \n        // Calculate start and end times\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        // Always create a 20-minute slot regardless of slotDuration prop\n        const slotDurationMinutes = 20; // Fixed 20-minute duration for created slots\n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDurationMinutes;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        // Create new slot\n        const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n        const slotToAdd = {\n            id: newId,\n            professionalId: professionalId,\n            start: startTime,\n            end: endTime,\n            date: date,\n            bookingProbability: 0.5 // Default probability, can be updated later by prediction model\n        };\n        \n        // Update timeslots\n        const updatedTimeslots = [...timeslots, slotToAdd];\n        setProps({ timeslots: updatedTimeslots });\n    }\n    \n    // Handle adding a new timeslot\n    handleAddSlot(professionalId, hour, minute) {\n        const { slotDuration } = this.props;\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        this.setState({\n            isAddingSlot: true,\n            selectedSlot: null,\n            newSlot: {\n                professionalId,\n                start: startTime,\n                end: endTime\n            }\n        });\n    }\n    \n    // Handle removing a timeslot\n    handleRemoveSlot(slotId) {\n        const { timeslots, setProps } = this.props;\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({ selectedSlot: null });\n    }\n    \n    // Handle saving a timeslot (new or edited)\n    handleSaveSlot() {\n        const { timeslots, date, setProps } = this.props;\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\n        \n        let updatedTimeslots;\n        \n        if (isAddingSlot) {\n            // Add new slot\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n            const slotToAdd = {\n                id: newId,\n                professionalId: newSlot.professionalId,\n                start: newSlot.start,\n                end: newSlot.end,\n                date: date\n            };\n            \n            updatedTimeslots = [...timeslots, slotToAdd];\n        } else {\n            // Update existing slot\n            updatedTimeslots = timeslots.map(slot => \n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\n            );\n        }\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Handle canceling edit or add operation\n    handleCancelEdit() {\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Convert time string to decimal hours\n    timeToDecimal(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours + (minutes / 60);\n    }\n    \n    // Format decimal hours to time string\n    decimalToTime(decimal) {\n        const hours = Math.floor(decimal);\n        const minutes = Math.round((decimal - hours) * 60);\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    // Get color based on booking probability\n    getProbabilityColor(probability) {\n        if (probability === undefined) return '#4CAF50'; // Default green\n        \n        if (probability >= 0.7) return '#4CAF50'; // Green for high probability\n        if (probability >= 0.4) return '#FFC107'; // Yellow for medium probability\n        return '#F44336'; // Red for low probability\n    }\n    \n    // Calculate the width of a slot as a percentage\n    calculateSlotWidth(slot) {\n        const { slotDuration, startHour, endHour } = this.props;\n        \n        // Calculate slot duration in minutes\n        const startDecimal = this.timeToDecimal(slot.start);\n        const endDecimal = this.timeToDecimal(slot.end);\n        const durationInHours = endDecimal - startDecimal;\n        const durationInMinutes = durationInHours * 60;\n        \n        // Calculate how many slotDuration intervals this covers\n        const slotCount = durationInMinutes / slotDuration;\n        \n        // Calculate total number of slots in the entire row\n        const totalHours = endHour - startHour;\n        const totalSlots = totalHours * (60 / slotDuration);\n        \n        // Return the percentage width relative to the entire row\n        return (slotCount / totalSlots) * 100;\n    }\n    \n    // Render a single slot rectangle\n    renderSlotRectangle(slot) {\n        const { slotDuration } = this.props;\n        \n        // Calculate slot duration in minutes\n        const slotStart = this.timeToDecimal(slot.start);\n        const slotEnd = this.timeToDecimal(slot.end);\n        const durationInHours = slotEnd - slotStart;\n        const durationInMinutes = durationInHours * 60;\n        \n        // Calculate how many 5-minute slots this covers\n        const slotCount = durationInMinutes / slotDuration;\n        \n        const slotStyle = {\n            position: 'absolute',\n            top: '0',\n            height: '100%',\n            backgroundColor: this.getProbabilityColor(slot.bookingProbability),\n            color: 'white',\n            borderRadius: '4px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            cursor: 'pointer',\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n            zIndex: 10,\n            overflow: 'hidden',\n            width: `calc(${slotCount * 100}%)`, // Each cell is 100% wide, so multiply by slotCount\n            left: 0\n        };\n        \n        const probabilityStyle = {\n            fontSize: '14px',\n            fontWeight: 'bold'\n        };\n        \n        return (\n            <div \n                key={`slot-${slot.id}`} \n                style={slotStyle}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    this.handleSlotClick(slot);\n                }}\n            >\n                {slot.bookingProbability !== undefined && (\n                    <div style={probabilityStyle}>\n                        {Math.round(slot.bookingProbability * 100)}%\n                    </div>\n                )}\n            </div>\n        );\n    }\n    \n    render() {\n        const { id, professionals, date, timeslots, startHour, endHour, slotDuration } = this.props;\n        \n        // Calculate number of time slots per hour (e.g., 3 for 20-minute slots)\n        const slotsPerHour = 60 / slotDuration;\n        \n        const styles = {\n            dashGantt: {\n                fontFamily: 'Arial, sans-serif',\n                margin: '20px 0'\n            },\n            dashGanttHeader: {\n                marginBottom: '10px'\n            },\n            dashGanttContainer: {\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                overflow: 'hidden',\n                overflowX: 'auto'\n            },\n            dashGanttTable: {\n                width: '100%',\n                borderCollapse: 'collapse',\n                tableLayout: 'fixed'\n            },\n            dashGanttHeaderRow: {\n                backgroundColor: '#f5f5f5'\n            },\n            dashGanttHeaderCell: {\n                padding: '8px',\n                textAlign: 'center',\n                fontWeight: 'bold',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc'\n            },\n            dashGanttFirstHeaderCell: {\n                width: '150px',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc'\n            },\n            dashGanttRow: {\n                height: '60px'\n            },\n            dashGanttProfessionalCell: {\n                width: '150px',\n                padding: '8px',\n                borderRight: '1px solid #ccc',\n                borderBottom: '1px solid #ccc',\n                backgroundColor: '#f9f9f9',\n                verticalAlign: 'middle'\n            },\n            dashGanttTimeCell: {\n                position: 'relative',\n                padding: '0',\n                borderRight: '1px solid #eee',\n                borderBottom: '1px solid #ccc',\n                cursor: 'pointer',\n                height: '60px',\n                width: `${100 / (slotsPerHour * (endHour - startHour))}%`\n            },\n            dashGanttSlot: {\n                position: 'absolute',\n                top: '0',\n                height: '100%',\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                borderRadius: '4px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: 'pointer',\n                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                zIndex: 10,\n                overflow: 'hidden'\n            },\n            dashGanttProbability: {\n                fontSize: '14px',\n                fontWeight: 'bold'\n            },\n            dashGanttEditor: {\n                marginTop: '20px',\n                padding: '15px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                backgroundColor: '#f9f9f9'\n            },\n            dashGanttForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '10px'\n            },\n            dashGanttFormGroup: {\n                display: 'flex',\n                alignItems: 'center'\n            },\n            dashGanttFormGroupLabel: {\n                width: '100px',\n                marginRight: '10px'\n            },\n            dashGanttFormGroupInput: {\n                flex: 1,\n                padding: '8px',\n                border: '1px solid #ccc',\n                borderRadius: '4px'\n            },\n            dashGanttFormActions: {\n                display: 'flex',\n                gap: '10px',\n                marginTop: '10px'\n            },\n            dashGanttFormActionsButton: {\n                padding: '8px 15px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontWeight: 'bold'\n            },\n            dashGanttFormActionsSave: {\n                backgroundColor: '#4CAF50',\n                color: 'white'\n            },\n            dashGanttFormActionsCancel: {\n                backgroundColor: '#f5f5f5'\n            },\n            dashGanttFormActionsRemove: {\n                backgroundColor: '#f44336',\n                color: 'white'\n            }\n        };\n        \n        // Generate hour labels\n        const hourLabels = [];\n        for (let hour = startHour; hour <= endHour; hour++) {\n            const displayHour = hour % 24; // Handle 24-hour format\n            const isPM = displayHour >= 12;\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n            hourLabels.push(timeLabel);\n        }\n        \n        // Generate time cells for each hour and minute interval\n        const generateTimeCells = (professional) => {\n            const cells = [];\n            const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\n            \n            // Iterate through each time slot for this professional\n            for (let hour = startHour; hour <= endHour; hour++) {\n                for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\n                    const minute = minuteIndex * slotDuration;\n                    const timeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                    \n                    // Determine if the current cell is the start of a time slot\n                    const startingSlot = professionalSlots.find(slot => {\n                        const [slotHour, slotMinute] = slot.start.split(':').map(Number);\n                        return slotHour === hour && slotMinute === minute;\n                    });\n                    \n                    // Determine if the current cell is inside any existing time slot\n                    const cellTime = hour + (minute / 60);\n                    const isWithinSlot = professionalSlots.find(slot => {\n                        const slotStart = this.timeToDecimal(slot.start);\n                        const slotEnd = this.timeToDecimal(slot.end);\n                        return cellTime >= slotStart && cellTime < slotEnd;\n                    });\n                    \n                    const isHovered = this.state.hoveredCell && \n                                    this.state.hoveredCell.professionalId === professional.id && \n                                    this.state.hoveredCell.hour === hour &&\n                                    this.state.hoveredCell.minute === minute;\n                    \n                    // Create the cell for this time slot\n                    const cell = (\n                        <td \n                            key={`cell-${professional.id}-${timeKey}`} \n                            style={{\n                                ...styles.dashGanttTimeCell,\n                                backgroundColor: isHovered ? '#f0f0f0' : 'transparent',\n                                borderLeft: minute === 0 ? '1px solid #ccc' : 'none',\n                                position: 'relative'\n                            }}\n                            onClick={() => this.handleCreateSlot(professional.id, hour, minute)}\n                            onMouseEnter={() => this.handleCellHover(professional.id, hour, minute)}\n                            onMouseLeave={this.handleCellLeave}\n                        >\n                            {/* Render slot only if this is the starting cell */}\n                            {startingSlot && this.renderSlotRectangle(startingSlot)}\n                            \n                            {/* If we're inside a slot but not at the start, render empty space */}\n                            {!startingSlot && isWithinSlot && (\n                                <div style={{ height: '100%' }}></div>\n                            )}\n                        </td>\n                    );\n                    \n                    cells.push(cell);\n                }\n            }\n            \n            return cells;\n        };\n        \n        // Generate hour header cells\n        const generateHourHeaderCells = () => {\n            const cells = [];\n            \n            for (let hour = startHour; hour <= endHour; hour++) {\n                const displayHour = hour % 24; // Handle 24-hour format\n                const isPM = displayHour >= 12;\n                const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n                const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n                \n                cells.push(\n                    <th \n                        key={`header-${hour}`} \n                        colSpan={slotsPerHour}\n                        style={styles.dashGanttHeaderCell}\n                    >\n                        {timeLabel}\n                    </th>\n                );\n            }\n            \n            return cells;\n        };\n\n        return (\n            <div id={id} style={styles.dashGantt}>\n                <div style={styles.dashGanttHeader}>\n                    <h2>Schedule for {date}</h2>\n                </div>\n                <div style={styles.dashGanttContainer}>\n                    <table style={styles.dashGanttTable}>\n                        <thead>\n                            <tr style={styles.dashGanttHeaderRow}>\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\n                                {generateHourHeaderCells()}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {professionals.map(professional => (\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\n                                    <td style={styles.dashGanttProfessionalCell}>\n                                        {professional.name}\n                                    </td>\n                                    {generateTimeCells(professional)}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                \n                {/* Render slot editor */}\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\n                    <div style={styles.dashGanttEditor}>\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\n                        <div style={styles.dashGanttForm}>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\n                                <select \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \n                                    onChange={e => {\n                                        const professionalId = parseInt(e.target.value);\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\n                                        }\n                                    }}\n                                    disabled={!this.state.isAddingSlot}\n                                >\n                                    {professionals.map(p => (\n                                        <option key={p.id} value={p.id}>{p.name}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \n                                    onChange={e => {\n                                        const start = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \n                                    onChange={e => {\n                                        const end = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormActions}>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\n                                    onClick={this.handleSaveSlot}\n                                >\n                                    Save\n                                </button>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\n                                    onClick={this.handleCancelEdit}\n                                >\n                                    Cancel\n                                </button>\n                                {!this.state.isAddingSlot && (\n                                    <button \n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nDashGantt.defaultProps = {\n    timeslots: [],\n    date: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format\n    startHour: 6, // 6:00 AM\n    endHour: 24, // Midnight\n    slotDuration: 20, // 20 minutes\n};\n\nDashGantt.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of professionals to display in the Gantt chart.\n     * Each professional should have an id and name.\n     */\n    professionals: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n\n    /**\n     * List of timeslots to display in the Gantt chart.\n     * Each timeslot should have an id, professionalId, start time, end time, and date.\n     */\n    timeslots: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            professionalId: PropTypes.number.isRequired,\n            start: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            end: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            date: PropTypes.string.isRequired, // Format: \"YYYY-MM-DD\"\n            bookingProbability: PropTypes.number // Optional: probability of booking (0-1)\n        })\n    ),\n\n    /**\n     * The date to display in the Gantt chart (YYYY-MM-DD).\n     */\n    date: PropTypes.string,\n\n    /**\n     * The start hour of the day (e.g., 6 for 6:00 AM).\n     */\n    startHour: PropTypes.number,\n\n    /**\n     * The end hour of the day (e.g., 24 for midnight).\n     */\n    endHour: PropTypes.number,\n\n    /**\n     * The duration of each slot in minutes.\n     */\n    slotDuration: PropTypes.number,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","handleSlotClick","bind","handleAddSlot","handleCreateSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","renderSlotRectangle","_inherits","key","value","slot","this","setState","hour","minute","_this$props","timeslots","date","setProps","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","endTimeInMinutes","endHour","endMinutes","endTime","slotToAdd","id","length","max","apply","_toConsumableArray","map","bookingProbability","slotDuration","slotId","_this$props2","filter","updatedTimeslots","_this$props3","_this$state","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","split","Number","decimal","hours","minutes","round","probability","undefined","_this$props4","startDecimal","timeToDecimal","_this2","slotStart","slotCount","slotStyle","position","top","height","backgroundColor","getProbabilityColor","color","borderRadius","display","justifyContent","alignItems","cursor","boxShadow","zIndex","overflow","width","left","React","style","onClick","e","stopPropagation","fontSize","fontWeight","_this3","_this$props5","professionals","slotsPerHour","styles","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","border","overflowX","dashGanttTable","borderCollapse","tableLayout","dashGanttHeaderRow","dashGanttHeaderCell","padding","textAlign","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","dashGanttProfessionalCell","verticalAlign","dashGanttTimeCell","dashGanttSlot","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","push","cells","colSpan","generateHourHeaderCells","professional","name","professionalSlots","_loop","_hour","_loop2","minuteIndex","timeKey","startingSlot","find","_slot$start$split$map2","slotHour","slotMinute","cellTime","isWithinSlot","slotEnd","isHovered","cell","borderLeft","onMouseEnter","onMouseLeave","generateTimeCells","onChange","parseInt","target","disabled","p","type","Component","defaultProps","Date","toISOString","propTypes","PropTypes","isRequired"],"sourceRoot":""}