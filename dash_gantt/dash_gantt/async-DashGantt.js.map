{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * DashGantt is a Gantt chart component for scheduling.\n * It displays professionals vertically and time horizontally.\n * Users can add, modify, and remove timeslots for each professional.\n * The component outputs data that can be used in a prediction model.\n */\nexport default class DashGantt extends Component {\n    constructor(props) {\n        super(props);\n        \n        // Add table ref\n        this.tableRef = React.createRef();\n        \n        // Initialize state with props\n        const { rawData, date } = props;\n        const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || new Date().toISOString().split('T')[0]);\n        \n        this.state = {\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            },\n            hoveredCell: null,\n            // Cache for slot width calculations to avoid repeated calculations\n            slotWidthCache: {},\n            // Internal state for transformed data\n            professionals: professionals || [],\n            timeslots: timeslots || [],\n            rawData: rawData || [],\n            date: date || new Date().toISOString().split('T')[0],\n            isDragging: false,\n            dragSide: null, // 'start' or 'end'\n            draggedSlot: null,\n            originalSlot: null,\n            dragPreview: null, // Will show preview of where slot will end up\n            dragType: null, // 'move', 'start', or 'end'\n        };\n        \n        // Bind methods\n        this.handleSlotClick = this.handleSlotClick.bind(this);\n        this.handleAddSlot = this.handleAddSlot.bind(this);\n        this.handleCreateSlot = this.handleCreateSlot.bind(this);\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\n        this.handleCellHover = this.handleCellHover.bind(this);\n        this.handleCellLeave = this.handleCellLeave.bind(this);\n        this.renderSlotRectangle = this.renderSlotRectangle.bind(this);\n        this.generateTimeCells = this.generateTimeCells.bind(this);\n        this.formatTime = this.formatTime.bind(this);\n        this.timeToDecimal = this.timeToDecimal.bind(this);\n        this.calculateSlotWidth = this.calculateSlotWidth.bind(this);\n        this.getSlotWidth = this.getSlotWidth.bind(this);\n        this.updateRawData = this.updateRawData.bind(this);\n        this.handleDragStart = this.handleDragStart.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n        this.handleDragEnd = this.handleDragEnd.bind(this);\n    }\n    \n    // Transform raw data into component format\n    static transformData(rawData, date) {\n        if (!rawData || !date) return { professionals: [], timeslots: [] };\n\n        // Filter data for the specific date\n        const filteredData = rawData.filter(row => {\n            const rowDate = row.datetime.split(' ')[0];\n            return rowDate === date;\n        });\n\n        // Create professionals list from unique doctors\n        const professionals = Array.from(new Set(filteredData.map(row => row.laakari)))\n            .map((doctor, idx) => ({ id: idx + 1, name: doctor }));\n\n        // Create doctor to id mapping\n        const doctorToId = Object.fromEntries(\n            professionals.map((p, idx) => [p.name, idx + 1])\n        );\n\n        // Transform timeslots\n        const timeslots = filteredData.map((row, idx) => {\n            const [date, time] = row.datetime.split(' ');\n            const startTime = time;\n            \n            // Calculate end time based on duration\n            const [hours, minutes] = time.split(':').map(Number);\n            const startDate = new Date();\n            startDate.setHours(hours, minutes, 0);\n            // Use kesto_min directly from the data\n            const durationMinutes = row.kesto_min || 0;\n            const endDate = new Date(startDate.getTime() + durationMinutes * 60000);\n            const endTime = `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}`;\n\n            return {\n                id: idx + 1,\n                professionalId: doctorToId[row.laakari],\n                start: startTime,\n                end: endTime,\n                date: date,\n                durationMinutes: durationMinutes, // Store the original duration\n                bookingProbability: row.bookingProbability || 0.5,\n                isBooked: row.tyhja === 0,\n                rawData: row // Keep reference to original data with all fields\n            };\n        });\n\n        return { professionals, timeslots };\n    }\n    \n    // Update getDerivedStateFromProps to handle undefined values\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps) return null;\n        \n        const { rawData, date } = nextProps;\n        if (rawData !== prevState.rawData || date !== prevState.date) {\n            const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || prevState.date);\n            return { \n                professionals: professionals || [], \n                timeslots: timeslots || [], \n                rawData: rawData || [], \n                date: date || prevState.date \n            };\n        }\n        return null;\n    }\n\n    // Update componentDidMount to handle undefined values\n    componentDidMount() {\n        const { rawData, date } = this.props;\n        const { professionals, timeslots } = DashGantt.transformData(rawData || [], date || this.state.date);\n        this.setState({ \n            professionals: professionals || [], \n            timeslots: timeslots || [],\n            rawData: rawData || [],\n            date: date || this.state.date\n        });\n    }\n    \n    // Handle clicking on a timeslot\n    handleSlotClick(slot) {\n        this.setState({\n            selectedSlot: slot,\n            isAddingSlot: false\n        });\n    }\n    \n    // Handle cell hover\n    handleCellHover(professionalId, hour, minute) {\n        // Avoid unnecessary state updates if hovering over the same cell\n        const currentHover = this.state.hoveredCell;\n        if (currentHover && \n            currentHover.professionalId === professionalId && \n            currentHover.hour === hour && \n            currentHover.minute === minute) {\n            return; // No change needed\n        }\n        \n        // Update the hover state\n        this.setState({\n            hoveredCell: { professionalId, hour, minute }\n        });\n    }\n    \n    // Handle cell leave\n    handleCellLeave() {\n        // Only update state if we're currently hovering over a cell\n        if (this.state.hoveredCell !== null) {\n            this.setState({\n                hoveredCell: null\n            });\n        }\n    }\n    \n    // Handle creating a new timeslot with a single click\n    handleCreateSlot(professionalId, hour, minute) {\n        const { timeslots, date } = this.state;\n        \n        // Calculate start and end times\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        // Always create a 20-minute slot as per business requirements\n        const slotDurationMinutes = 20;\n        \n        // Calculate end time\n        const totalStartMinutes = (startHour * 60) + startMinutes;\n        const totalEndMinutes = totalStartMinutes + slotDurationMinutes;\n        const endHour = Math.floor(totalEndMinutes / 60);\n        const endMinutes = totalEndMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        // Create new slot\n        const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n        const slotToAdd = {\n            id: newId,\n            professionalId: professionalId,\n            start: startTime,\n            end: endTime,\n            date: date,\n            bookingProbability: 0.5,\n            isBooked: false,\n            appointmentType: 'In-person appointment',\n            resource: 'Default',\n            rawData: null // New slot has no original data\n        };\n        \n        // Update timeslots and raw data\n        const updatedTimeslots = [...timeslots, slotToAdd];\n        this.setState({ timeslots: updatedTimeslots });\n        this.updateRawData(updatedTimeslots);\n    }\n    \n    // Handle adding a new timeslot\n    handleAddSlot(professionalId, hour, minute) {\n        const { slotDuration } = this.props;\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        this.setState({\n            isAddingSlot: true,\n            selectedSlot: null,\n            newSlot: {\n                professionalId,\n                start: startTime,\n                end: endTime\n            }\n        });\n    }\n    \n    // Handle removing a timeslot\n    handleRemoveSlot(slotId) {\n        const { timeslots } = this.state;\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\n        this.setState({ \n            timeslots: updatedTimeslots,\n            selectedSlot: null\n        });\n        this.updateRawData(updatedTimeslots);\n    }\n    \n    // Handle saving a timeslot (new or edited)\n    handleSaveSlot() {\n        const { timeslots } = this.state;\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\n        \n        let updatedTimeslots;\n        \n        if (isAddingSlot) {\n            // Add new slot\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n            const slotToAdd = {\n                id: newId,\n                professionalId: newSlot.professionalId,\n                start: newSlot.start,\n                end: newSlot.end,\n                date: this.props.date,\n                bookingProbability: 0.5,\n                isBooked: false,\n                appointmentType: 'In-person appointment',\n                resource: 'Default',\n                rawData: null\n            };\n            \n            updatedTimeslots = [...timeslots, slotToAdd];\n        } else {\n            // Update existing slot\n            updatedTimeslots = timeslots.map(slot => \n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\n            );\n        }\n        \n        this.setState({\n            timeslots: updatedTimeslots,\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n        \n        this.updateRawData(updatedTimeslots);\n    }\n    \n    // Handle canceling edit or add operation\n    handleCancelEdit() {\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Convert time string to decimal hours\n    timeToDecimal(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours + (minutes / 60);\n    }\n    \n    // Calculate the width of a slot that should span multiple cells\n    calculateSlotWidth(start, end, slotDuration) {\n        // Calculate duration in minutes\n        const startDecimal = this.timeToDecimal(start);\n        const endDecimal = this.timeToDecimal(end);\n        const durationInHours = endDecimal - startDecimal;\n        const durationInMinutes = durationInHours * 60;\n        \n        // Calculate how many grid cells this should span\n        // To avoid floating-point precision issues, round to the nearest integer\n        // For a 20-minute duration with 5-minute slots, this should consistently give 4 cells\n        const numCells = Math.round(durationInMinutes / slotDuration);\n        \n        // Log the calculation only in development mode to reduce console noise\n        if (process.env.NODE_ENV === 'development') {\n            console.log(`Slot ${start}-${end}: Duration=${durationInMinutes}min, Spans ${numCells} cells`);\n        }\n        \n        // Return the exact number of cells to span (minimum 1)\n        return Math.max(1, numCells);\n    }\n    \n    // Format decimal hours to time string\n    decimalToTime(decimal) {\n        const hours = Math.floor(decimal);\n        const minutes = Math.round((decimal - hours) * 60);\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    // Get color based on booking probability and booking status\n    getProbabilityColor(slot) {\n        // If the slot is booked, use a gray color\n        if (slot.isBooked) {\n            return '#808080'; // Gray color for booked slots\n        }\n        \n        // For unbooked slots, use probability-based colors from the provided palette\n        const probability = slot.bookingProbability;\n        if (probability === undefined) return 'rgb(0, 147, 146)'; // Default to first color in palette\n        \n        // Clamp probability between 0 and 1 for safety\n        const p = Math.max(0, Math.min(1, probability));\n        \n        // Define the color palette (from green to red)\n        const colorPalette = [\n            \"rgb(0, 147, 146)\",    // First green\n            \"rgb(57, 177, 133)\",\n            \"rgb(156, 203, 134)\",\n            \"rgb(233, 226, 156)\",  // Yellow-ish\n            \"rgb(238, 180, 121)\",\n            \"rgb(232, 132, 113)\",\n            \"rgb(207, 89, 126)\"    // Last red\n        ];\n        \n        // Calculate which color to use based on probability\n        // p=0 means highest index (most red), p=1 means lowest index (most green)\n        const index = Math.floor((1 - p) * (colorPalette.length - 1));\n        \n        return colorPalette[index];\n    }\n    \n    // Render a single slot rectangle\n    renderSlotRectangle(slot) {\n        if (!slot) return null;\n        \n        const { slotDuration } = this.props || {};\n        if (!slotDuration) return null;\n        \n        try {\n            // Get the number of cells this slot should span\n            const numCellsToSpan = this.getSlotWidth(slot, slotDuration);\n            \n            const slotStyle = {\n                position: 'absolute',\n                top: '2px',\n                left: '0',\n                height: 'calc(100% - 4px)',\n                width: `calc(${numCellsToSpan * 100}% + ${numCellsToSpan - 1}px)`,\n                boxSizing: 'border-box',\n                backgroundColor: this.getProbabilityColor(slot),\n                color: 'white',\n                borderRadius: '0',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: slot.isBooked ? 'not-allowed' : (this.state.isDragging ? 'grabbing' : 'grab'),\n                boxShadow: '0 1px 2px rgba(0,0,0,0.1)',\n                zIndex: 100,\n                transition: 'all 0.15s ease-in-out',\n                opacity: 1\n            };\n            \n            // Make handles thinner - 1px instead of 4px\n            const handleStyle = {\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                width: '1px', // 1px thin handles (visual appearance)\n                cursor: 'ew-resize',\n                backgroundColor: 'rgba(255, 255, 255, 0.5)', // Slightly more visible\n                transition: 'background-color 0.2s ease'\n            };\n\n            const leftHandleStyle = {\n                ...handleStyle,\n                left: 0, // Position at the edge\n                borderRadius: '0'\n            };\n\n            const rightHandleStyle = {\n                ...handleStyle,\n                right: 0, // Position at the edge\n                borderRadius: '0'\n            };\n            \n            // Add wider invisible handles for easier grabbing (clickable area)\n            const invisibleHandleStyle = {\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                width: '3px', // 3px wide clickable area\n                cursor: 'ew-resize',\n                backgroundColor: 'transparent', // Invisible\n                zIndex: 101 // Higher z-index to ensure it's above the visible handle\n            };\n            \n            const leftInvisibleHandleStyle = {\n                ...invisibleHandleStyle,\n                left: '-1px' // Extend 1px to the left, keeping 2px inside\n            };\n            \n            const rightInvisibleHandleStyle = {\n                ...invisibleHandleStyle,\n                right: '-1px' // Extend 1px to the right, keeping 2px inside\n            };\n\n            return (\n                <div \n                    key={`slot-${slot.id}`} \n                    style={slotStyle}\n                    onClick={(e) => {\n                        e.stopPropagation();\n                        if (!slot.isBooked) {\n                            this.handleSlotClick(slot);\n                        }\n                    }}\n                    onMouseDown={(e) => {\n                        if (!slot.isBooked && e.target === e.currentTarget) {\n                            this.handleDragStart(e, slot, 'move');\n                        }\n                    }}\n                    onContextMenu={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!slot.isBooked) {\n                            this.handleRemoveSlot(slot.id);\n                        }\n                    }}\n                    title={`Time slot: ${slot.start} - ${slot.end}\n${slot.isBooked ? 'Status: Booked' : `Booking probability: ${Math.round((slot.bookingProbability || 0.5) * 100)}%`}\nRight-click to remove\nDrag edges to resize\nDrag middle to move`}\n                >\n                    {!slot.isBooked && (\n                        <>\n                            {/* Visual handles (thin) */}\n                            <div\n                                style={leftHandleStyle}\n                                onMouseEnter={(e) => {\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';\n                                }}\n                                onMouseLeave={(e) => {\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\n                                }}\n                            />\n                            <div\n                                style={rightHandleStyle}\n                                onMouseEnter={(e) => {\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';\n                                }}\n                                onMouseLeave={(e) => {\n                                    e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\n                                }}\n                            />\n                            \n                            {/* Invisible wider handles for easier grabbing */}\n                            <div\n                                style={leftInvisibleHandleStyle}\n                                onMouseDown={(e) => this.handleDragStart(e, slot, 'start')}\n                                onMouseEnter={(e) => {\n                                    const visibleHandle = e.currentTarget.previousSibling;\n                                    if (visibleHandle) {\n                                        visibleHandle.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';\n                                    }\n                                }}\n                                onMouseLeave={(e) => {\n                                    const visibleHandle = e.currentTarget.previousSibling;\n                                    if (visibleHandle) {\n                                        visibleHandle.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\n                                    }\n                                }}\n                            />\n                            <div\n                                style={rightInvisibleHandleStyle}\n                                onMouseDown={(e) => this.handleDragStart(e, slot, 'end')}\n                                onMouseEnter={(e) => {\n                                    const visibleHandle = e.currentTarget.previousSibling.previousSibling;\n                                    if (visibleHandle) {\n                                        visibleHandle.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';\n                                    }\n                                }}\n                                onMouseLeave={(e) => {\n                                    const visibleHandle = e.currentTarget.previousSibling.previousSibling;\n                                    if (visibleHandle) {\n                                        visibleHandle.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\n                                    }\n                                }}\n                            />\n                        </>\n                    )}\n                </div>\n            );\n        } catch (error) {\n            console.error(\"Error rendering slot rectangle:\", error);\n            return null;\n        }\n    }\n    \n    // Format time for display (HH:MM)\n    formatTime(hour, minute) {\n        return `${Math.floor(hour).toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n    }\n    \n    // Generate time cells for each hour and minute interval\n    generateTimeCells(professional, styles) {\n        const { startHour, endHour, slotDuration } = this.props;\n        const { timeslots, dragPreview, isDragging, dragType } = this.state;\n        const slotsPerHour = 60 / slotDuration;\n        const cells = [];\n        \n        // Filter slots for this professional\n        const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\n        \n        // Group slots by their start time\n        const slotsByStartTime = {};\n        professionalSlots.forEach(slot => {\n            const [hour, minute] = slot.start.split(':').map(Number);\n            const key = `${hour}:${minute}`;\n            slotsByStartTime[key] = slot;\n        });\n        \n        // Check if we are dragging a slot for this professional\n        const isPreviewingForThisProfessional = \n            dragPreview && dragPreview.professionalId === professional.id;\n        \n        // Determine which slots should be hidden during drag preview (only the one being dragged)\n        const slotBeingDragged = isDragging && isPreviewingForThisProfessional ? dragPreview.id : null;\n        \n        // For each time cell in the grid\n        for (let hour = startHour; hour <= endHour; hour++) {\n            for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\n                const minute = minuteIndex * slotDuration;\n                const timeKey = `${hour}:${minute}`;\n                const displayTimeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                \n                // Check if this cell is the start of a time slot\n                const slot = slotsByStartTime[timeKey];\n                \n                // Only show hover effect if not currently dragging\n                const isHovered = !isDragging && this.state.hoveredCell && \n                               this.state.hoveredCell.professionalId === professional.id && \n                               this.state.hoveredCell.hour === hour &&\n                               this.state.hoveredCell.minute === minute;\n                \n                // Format time for display in the hover tooltip\n                const timeDisplay = this.formatTime(hour, minute);\n                \n                // Determine if this is the first minute of the hour to add the hour marker\n                const isHourStart = minute === 0;\n                \n                // Create cell style with less pronounced hour marker\n                const cellStyle = {\n                    ...styles.dashGanttTimeCell,\n                    backgroundColor: isHovered ? 'rgba(33, 150, 243, 0.4)' : 'transparent',\n                    position: 'relative'\n                };\n                \n                // Check if this cell should show the preview\n                const cellTimeDecimal = hour + (minute / 60);\n                const isInPreviewRange = isPreviewingForThisProfessional && \n                                      this.timeToDecimal(dragPreview.start) <= cellTimeDecimal && \n                                      this.timeToDecimal(dragPreview.end) > cellTimeDecimal;\n                \n                // Prepare cell content\n                let cellContent;\n                \n                if (isDragging && isInPreviewRange) {\n                    // Only show the preview - no opaque original slot\n                    const borderStyle = 'solid';\n                    \n                    cellContent = (\n                        <>\n                            {/* Only show non-dragged slots */}\n                            {slot && slot.id !== slotBeingDragged && this.renderSlotRectangle(slot)}\n                            \n                            {/* Preview overlay */}\n                            <div style={{\n                                position: 'absolute',\n                                top: '2px',\n                                left: '0',\n                                right: '0',\n                                bottom: '2px',\n                                backgroundColor: 'rgba(33, 150, 243, 0.4)',\n                                border: `1px ${borderStyle} #1976D2`,\n                                pointerEvents: 'none',\n                                zIndex: 95\n                            }} />\n                            \n                            {/* Note: We don't show hover tooltip during dragging */}\n                        </>\n                    );\n                } else {\n                    // Normal case - just show the slot if there is one\n                    cellContent = (\n                        <>\n                            {/* Hide original slot only if it's being dragged */}\n                            {(!isDragging || slot?.id !== slotBeingDragged) && slot && this.renderSlotRectangle(slot)}\n                            \n                            {/* Only show hover tooltip if not dragging */}\n                            {isHovered && !isDragging && (\n                                <div style={{\n                                    position: 'absolute',\n                                    bottom: '2px',\n                                    right: '2px',\n                                    fontSize: '10px',\n                                    color: '#666',\n                                    pointerEvents: 'none',\n                                    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                                    padding: '1px 3px',\n                                    borderRadius: '2px',\n                                    zIndex: 200,\n                                    border: '1px solid #eaeaea'\n                                }}>\n                                    {timeDisplay}\n                                </div>\n                            )}\n                        </>\n                    );\n                }\n                \n                // Create and add the cell\n                cells.push(\n                    <td \n                        key={`cell-${professional.id}-${displayTimeKey}`}\n                        style={cellStyle}\n                        onClick={() => this.handleCreateSlot(professional.id, hour, minute)}\n                        onMouseEnter={() => {\n                            // Only activate hover if not dragging\n                            if (!isDragging) {\n                                this.handleCellHover(professional.id, hour, minute);\n                            }\n                        }}\n                        onMouseLeave={() => {\n                            // Only handle leave if not dragging\n                            if (!isDragging) {\n                                this.handleCellLeave();\n                            }\n                        }}\n                        title={`Time: ${timeDisplay}`}\n                    >\n                        {cellContent}\n                    </td>\n                );\n            }\n        }\n        \n        return cells;\n    }\n    \n    // Get cached slot width or calculate it if not in cache\n    getSlotWidth(slot, slotDuration) {\n        if (!slot || !slot.start || !slot.end || !slotDuration) {\n            return 1; // Default to 1 if any required values are missing\n        }\n        \n        // Create a unique key for this slot and duration\n        const cacheKey = `${slot.id}_${slot.start}_${slot.end}_${slotDuration}`;\n        \n        // If we have a cached value, use it\n        if (this.state.slotWidthCache[cacheKey] !== undefined) {\n            return this.state.slotWidthCache[cacheKey];\n        }\n        \n        // Otherwise, calculate and cache the value\n        const width = this.calculateSlotWidth(slot.start, slot.end, slotDuration);\n        \n        // Update the cache (without triggering a re-render)\n        // We can safely update state directly here since we're not using setState\n        // and this won't trigger a re-render - it's just for caching\n        this.state.slotWidthCache[cacheKey] = width;\n        \n        return width;\n    }\n    \n    // Optimize rendering by preventing unnecessary re-renders\n    shouldComponentUpdate(nextProps, nextState) {\n        // We need to allow hover state changes to trigger re-renders for hover effects\n        // but we can still optimize by not recalculating slot widths\n        \n        // For any state or prop changes, we should re-render\n        // But we can optimize calculations inside the render cycle\n        return true;\n    }\n    \n    // Reset cache when props change\n    componentDidUpdate(prevProps) {\n        // If timeslots change, clear the width cache to ensure correct calculations\n        if (prevProps.timeslots !== this.props.timeslots || \n            prevProps.slotDuration !== this.props.slotDuration) {\n            this.setState({\n                slotWidthCache: {}\n            });\n        }\n    }\n    \n    // Update raw data when timeslots change\n    updateRawData(timeslots) {\n        const { rawData, onDataChange, setProps } = this.props;\n        \n        // Create a fresh array for the updated raw data\n        // Instead of just creating a copy and modifying it\n        let updatedRawData = [];\n        \n        // First, filter existing data if needed\n        if (rawData && rawData.length > 0) {\n            // Keep track of which timeslots are still valid\n            const validTimeslots = new Set();\n            \n            // Generate lookup keys for all currently valid timeslots\n            timeslots.forEach(slot => {\n                const doctorName = this.state.professionals.find(p => p.id === slot.professionalId)?.name;\n                if (doctorName) {\n                    const key = `${slot.date} ${slot.start}_${doctorName}`;\n                    validTimeslots.add(key);\n                }\n            });\n            \n            // Only keep raw data items that correspond to slots we still have\n            updatedRawData = rawData.filter(item => {\n                // Skip items that don't have the required fields\n                if (!item.datetime || !item.laakari) return false;\n                \n                // Create a key to match against our valid timeslots\n                const key = `${item.datetime}_${item.laakari}`;\n                return validTimeslots.has(key);\n            });\n        }\n        \n        // Now process all current timeslots to update or add them\n        timeslots.forEach(timeslot => {\n            const originalData = timeslot.rawData;\n            const doctorName = this.state.professionals.find(p => p.id === timeslot.professionalId)?.name;\n            if (!doctorName) return;\n            \n            // For existing slots\n            if (originalData) {\n                // Calculate duration from start and end time\n                const [startHours, startMinutes] = timeslot.start.split(':').map(Number);\n                const [endHours, endMinutes] = timeslot.end.split(':').map(Number);\n                \n                // Handle crossing midnight if needed\n                let durationMinutes;\n                if (endHours < startHours || (endHours === startHours && endMinutes < startMinutes)) {\n                    // End time is on the next day\n                    durationMinutes = ((endHours + 24) * 60 + endMinutes) - (startHours * 60 + startMinutes);\n                } else {\n                    durationMinutes = (endHours * 60 + endMinutes) - (startHours * 60 + startMinutes);\n                }\n                \n                // Find the corresponding row in the filtered raw data\n                const rowIndex = updatedRawData.findIndex(row => \n                    row.datetime === `${timeslot.date} ${timeslot.start}` &&\n                    row.laakari === doctorName\n                );\n                \n                if (rowIndex !== -1) {\n                    // Update the existing row\n                    updatedRawData[rowIndex] = {\n                        ...updatedRawData[rowIndex],\n                        datetime: `${timeslot.date} ${timeslot.start}`,\n                        kesto_min: durationMinutes,\n                        tyhja: timeslot.isBooked ? 0 : 1,\n                        bookingProbability: timeslot.bookingProbability || 0.5\n                    };\n                } else {\n                    // The row was removed during filtering, add it back\n                    updatedRawData.push({\n                        datetime: `${timeslot.date} ${timeslot.start}`,\n                        laakari: doctorName,\n                        kesto_min: durationMinutes,\n                        tyhja: timeslot.isBooked ? 0 : 1,\n                        bookingProbability: timeslot.bookingProbability || 0.5\n                    });\n                }\n            } \n            // For new slots\n            else if (!originalData && timeslot.start && timeslot.end) {\n                // Calculate duration\n                const [startHours, startMinutes] = timeslot.start.split(':').map(Number);\n                const [endHours, endMinutes] = timeslot.end.split(':').map(Number);\n                \n                let durationMinutes;\n                if (endHours < startHours || (endHours === startHours && endMinutes < startMinutes)) {\n                    durationMinutes = ((endHours + 24) * 60 + endMinutes) - (startHours * 60 + startMinutes);\n                } else {\n                    durationMinutes = (endHours * 60 + endMinutes) - (startHours * 60 + startMinutes);\n                }\n                \n                // Create and add a new row\n                updatedRawData.push({\n                    datetime: `${timeslot.date} ${timeslot.start}`,\n                    laakari: doctorName,\n                    kesto_min: durationMinutes,\n                    tyhja: timeslot.isBooked ? 0 : 1,\n                    bookingProbability: timeslot.bookingProbability || 0.5,\n                    toimipiste: \"Default\",\n                    aikaryhman: \"Default\",\n                    aikaryhma: \"Default\",\n                    RESURSSI: \"Default\",\n                    specialty: \"Default\",\n                    ETNS_A: 1,\n                    ETNS_B: 1\n                });\n            }\n        });\n        \n        // Call the callback if provided\n        if (onDataChange) {\n            onDataChange(updatedRawData);\n        }\n\n        // Update Dash props if setProps is available\n        if (setProps) {\n            setProps({ rawData: updatedRawData });\n        }\n    }\n    \n    // Add these new methods for handling drag operations\n    handleDragStart(e, slot, type) {\n        e.stopPropagation();\n        if (slot.isBooked) return;\n        \n        // For move operations, capture the initial mouse position and offset\n        const initialMouseX = e.clientX;\n        let initialOffset = 0;\n        \n        if (type === 'move' && this.tableRef.current) {\n            const tableRect = this.tableRef.current.getBoundingClientRect();\n            // Calculate initial offset based on the position within the slot\n            const slotStart = this.timeToDecimal(slot.start) - this.props.startHour;\n            const hoursPerDay = this.props.endHour - this.props.startHour;\n            const pixelsPerHour = tableRect.width / hoursPerDay;\n            \n            // Calculate offset from the start of the slot in pixels\n            initialOffset = initialMouseX - (tableRect.left + slotStart * pixelsPerHour);\n        }\n        \n        this.setState({\n            isDragging: true,\n            dragType: type,\n            draggedSlot: slot,\n            originalSlot: { ...slot },\n            dragPreview: { ...slot }, // Start with original slot as preview for smoother transitions\n            initialMouseX,\n            initialOffset\n        });\n\n        document.addEventListener('mousemove', this.handleDrag);\n        document.addEventListener('mouseup', this.handleDragEnd);\n    }\n\n    handleDrag(e) {\n        if (!this.state.isDragging || !this.tableRef.current) return;\n\n        const { slotDuration } = this.props;\n        const { draggedSlot, dragType, initialOffset } = this.state;\n\n        // Get accurate table dimensions\n        const tableRect = this.tableRef.current.getBoundingClientRect();\n        const hoursPerDay = this.props.endHour - this.props.startHour;\n        const pixelsPerHour = tableRect.width / hoursPerDay;\n        \n        // Calculate relative mouse position with offset adjustment for \"move\" operations\n        let relativeX;\n        if (dragType === 'move') {\n            relativeX = e.clientX - tableRect.left - initialOffset;\n        } else {\n            relativeX = e.clientX - tableRect.left;\n        }\n        \n        // Constrain the position to the table bounds\n        relativeX = Math.max(0, Math.min(relativeX, tableRect.width));\n        \n        // Convert pixel position to time\n        const hoursFromStart = relativeX / pixelsPerHour;\n        const totalHours = this.props.startHour + hoursFromStart;\n        \n        // Calculate hours and minutes\n        const hour = Math.floor(totalHours);\n        const minute = Math.floor((totalHours - hour) * 60);\n        \n        // Snap to grid\n        const snappedMinute = Math.round(minute / slotDuration) * slotDuration;\n        const newTime = `${Math.min(23, Math.max(0, hour)).toString().padStart(2, '0')}:${snappedMinute.toString().padStart(2, '0')}`;\n        \n        // Create a copy of the slot to update\n        const updatedSlot = { ...draggedSlot };\n        \n        if (dragType === 'move') {\n            // For moving, calculate duration and preserve it\n            const startDecimal = this.timeToDecimal(draggedSlot.start);\n            const endDecimal = this.timeToDecimal(draggedSlot.end);\n            const duration = endDecimal - startDecimal;\n            \n            // Set new start time based on grid-snapped position\n            updatedSlot.start = newTime;\n            \n            // Calculate new end time by adding the duration\n            const newEndDecimal = this.timeToDecimal(newTime) + duration;\n            updatedSlot.end = this.decimalToTime(newEndDecimal);\n        } else if (dragType === 'start') {\n            // For resizing the start, ensure it doesn't go past the end\n            const endDecimal = this.timeToDecimal(draggedSlot.end);\n            const newStartDecimal = this.timeToDecimal(newTime);\n            \n            if (newStartDecimal < endDecimal) {\n                updatedSlot.start = newTime;\n            } else {\n                // If trying to drag start beyond end, cap it\n                updatedSlot.start = this.decimalToTime(endDecimal - (slotDuration / 60));\n            }\n        } else if (dragType === 'end') {\n            // For resizing the end, ensure it doesn't go before the start\n            const startDecimal = this.timeToDecimal(draggedSlot.start);\n            const newEndDecimal = this.timeToDecimal(newTime);\n            \n            if (newEndDecimal > startDecimal) {\n                updatedSlot.end = newTime;\n            } else {\n                // If trying to drag end before start, cap it\n                updatedSlot.end = this.decimalToTime(startDecimal + (slotDuration / 60));\n            }\n        }\n        \n        this.setState({ dragPreview: updatedSlot });\n    }\n\n    handleDragEnd() {\n        const { isDragging, dragPreview, originalSlot } = this.state;\n        if (!isDragging) return;\n\n        document.removeEventListener('mousemove', this.handleDrag);\n        document.removeEventListener('mouseup', this.handleDragEnd);\n\n        if (dragPreview) {\n            const startTime = this.timeToDecimal(dragPreview.start);\n            const endTime = this.timeToDecimal(dragPreview.end);\n\n            if (endTime <= startTime) {\n                // Invalid time range, revert to original\n                this.setState({\n                    isDragging: false,\n                    dragType: null,\n                    draggedSlot: null,\n                    originalSlot: null,\n                    dragPreview: null\n                });\n                return;\n            }\n\n            // Update the slot with preview values\n            const { timeslots } = this.state;\n            const updatedTimeslots = timeslots.map(slot =>\n                slot.id === dragPreview.id ? dragPreview : slot\n            );\n\n            this.setState({\n                timeslots: updatedTimeslots,\n                isDragging: false,\n                dragType: null,\n                draggedSlot: null,\n                originalSlot: null,\n                dragPreview: null\n            });\n\n            this.updateRawData(updatedTimeslots);\n        }\n    }\n    \n    // 1. First, add componentWillUnmount to clean up event listeners\n    componentWillUnmount() {\n        // Clean up event listeners\n        document.removeEventListener('mousemove', this.handleDrag);\n        document.removeEventListener('mouseup', this.handleDragEnd);\n    }\n    \n    render() {\n        const { id, date, startHour, endHour, slotDuration, backgroundColor } = this.props;\n        const { professionals, timeslots } = this.state;\n        \n        // Calculate number of time slots per hour (e.g., 12 for 5-minute slots)\n        const slotsPerHour = 60 / slotDuration;\n        \n        // Calculate total number of slots in the timeline\n        const totalSlots = (endHour - startHour) * slotsPerHour;\n        \n        // Calculate a reasonable cell width in pixels - each hour should be at least 60px wide\n        const hourWidth = 60;\n        const cellWidth = hourWidth / slotsPerHour;\n        \n        const styles = {\n            dashGantt: {\n                fontFamily: 'Arial, sans-serif',\n                margin: '20px 0'\n            },\n            dashGanttHeader: {\n                marginBottom: '10px'\n            },\n            dashGanttContainer: {\n                border: '1px solid #e0e0e0', // Even lighter border for simple_white theme\n                borderRadius: '4px', // Less rounded corners for clean look\n                overflow: 'hidden',\n                overflowX: 'auto',\n                boxShadow: 'none' // No shadow for minimalist look\n            },\n            dashGanttTable: {\n                width: '100%',\n                borderCollapse: 'collapse',\n                tableLayout: 'fixed',\n                // Each hour is at least hourWidth pixels, plus professional column\n                minWidth: `${150 + (endHour - startHour) * hourWidth}px`\n            },\n            dashGanttHeaderRow: {\n                backgroundColor: backgroundColor || '#ffffff' // White background like simple_white theme\n            },\n            dashGanttHeaderCell: {\n                padding: '12px 8px', \n                textAlign: 'center',\n                fontWeight: '500',\n                borderRight: '1px solid #eaeaea',\n                borderBottom: '1px solid #eaeaea',\n                fontSize: '14px',\n                color: '#444',\n                position: 'relative'\n            },\n            dashGanttFirstHeaderCell: {\n                width: '150px',\n                borderRight: '1px solid #eaeaea', // Changed from #aaaaaa to match other cells\n                borderBottom: '1px solid #eaeaea'\n            },\n            dashGanttRow: {\n                height: '60px'\n            },\n            dashGanttProfessionalCell: {\n                width: '150px',\n                padding: '8px',\n                borderRight: '1px solid #eaeaea',\n                borderBottom: '1px solid #eaeaea',\n                backgroundColor: backgroundColor || '#ffffff',\n                verticalAlign: 'middle',\n                fontWeight: '500',\n                fontSize: '14px',\n                color: '#444'\n            },\n            dashGanttTimeCell: {\n                position: 'relative',\n                padding: '0',\n                borderRight: '1px solid #f5f5f5', // Very subtle grid lines\n                borderBottom: '1px solid #eaeaea',\n                cursor: 'pointer',\n                height: '60px',\n                // We're setting a minimum width based on a reasonable cell size\n                minWidth: '5px', \n                width: `${100 / totalSlots}%`,\n                boxSizing: 'border-box',\n                transition: 'background-color 0.2s ease'\n            },\n            dashGanttSlot: {\n                position: 'absolute',\n                top: '0',\n                height: '100%',\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                borderRadius: '4px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: 'pointer',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)', // Lighter shadow for cleaner look\n                zIndex: 10,\n                overflow: 'hidden'\n            },\n            dashGanttProbability: {\n                fontSize: '14px',\n                fontWeight: '500'\n            },\n            dashGanttEditor: {\n                marginTop: '20px',\n                padding: '15px',\n                border: '1px solid #eaeaea', // Lighter border for simple_white\n                borderRadius: '4px',\n                backgroundColor: '#ffffff' // Pure white background\n            },\n            dashGanttForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '10px'\n            },\n            dashGanttFormGroup: {\n                display: 'flex',\n                alignItems: 'center'\n            },\n            dashGanttFormGroupLabel: {\n                width: '100px',\n                marginRight: '10px',\n                color: '#444',\n                fontSize: '14px'\n            },\n            dashGanttFormGroupInput: {\n                flex: 1,\n                padding: '8px',\n                border: '1px solid #eaeaea',\n                borderRadius: '4px',\n                fontSize: '14px'\n            },\n            dashGanttFormActions: {\n                display: 'flex',\n                gap: '10px',\n                marginTop: '10px'\n            },\n            dashGanttFormActionsButton: {\n                padding: '8px 15px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontWeight: '500',\n                fontSize: '14px'\n            },\n            dashGanttFormActionsSave: {\n                backgroundColor: '#2196F3', // Using blue for primary action\n                color: 'white'\n            },\n            dashGanttFormActionsCancel: {\n                backgroundColor: '#f5f5f5',\n                color: '#333'\n            },\n            dashGanttFormActionsRemove: {\n                backgroundColor: '#f44336',\n                color: 'white'\n            }\n        };\n        \n        // Generate hour labels\n        const hourLabels = [];\n        for (let hour = startHour; hour <= endHour; hour++) {\n            const displayHour = hour % 24; // Handle 24-hour format\n            const isPM = displayHour >= 12;\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n            hourLabels.push(timeLabel);\n        }\n        \n        // Generate hour header cells\n        const generateHourHeaderCells = () => {\n            const cells = [];\n            \n            for (let hour = startHour; hour <= endHour; hour++) {\n                // Use 24-hour format (European style)\n                // Ensure we're not exceeding 24 hours (handle edge case for endHour=24)\n                const displayHour = hour === 24 ? 24 : hour % 24;\n                // Format as 2-digit hour (e.g., \"06\" instead of \"6\")\n                const timeLabel = `${displayHour.toString().padStart(2, '0')}:00`;\n                \n                // Remove the left border that we previously added\n                cells.push(\n                    <th \n                        key={`header-${hour}`} \n                        colSpan={slotsPerHour}\n                        style={styles.dashGanttHeaderCell}\n                    >\n                        {timeLabel}\n                    </th>\n                );\n            }\n            \n            return cells;\n        };\n\n        return (\n            <div id={id} style={styles.dashGantt}>\n                <div style={styles.dashGanttHeader}>\n                    <h2>Schedule for {date}</h2>\n                </div>\n                <div style={styles.dashGanttContainer}>\n                    <table ref={this.tableRef} style={styles.dashGanttTable}>\n                        <thead>\n                            <tr style={styles.dashGanttHeaderRow}>\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\n                                {generateHourHeaderCells()}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {professionals.map(professional => (\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\n                                    <td style={styles.dashGanttProfessionalCell}>\n                                        {professional.name}\n                                    </td>\n                                    {this.generateTimeCells(professional, styles)}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                \n                {/* Render slot editor */}\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\n                    <div style={styles.dashGanttEditor}>\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\n                        <div style={styles.dashGanttForm}>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\n                                <select \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \n                                    onChange={e => {\n                                        const professionalId = parseInt(e.target.value);\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\n                                        }\n                                    }}\n                                    disabled={!this.state.isAddingSlot}\n                                >\n                                    {professionals.map(p => (\n                                        <option key={p.id} value={p.id}>{p.name}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \n                                    onChange={e => {\n                                        const start = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \n                                    onChange={e => {\n                                        const end = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormActions}>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\n                                    onClick={this.handleSaveSlot}\n                                >\n                                    Save\n                                </button>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\n                                    onClick={this.handleCancelEdit}\n                                >\n                                    Cancel\n                                </button>\n                                {!this.state.isAddingSlot && (\n                                    <button \n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nDashGantt.defaultProps = {\n    rawData: [],\n    date: new Date().toISOString().split('T')[0],\n    startHour: 6,\n    endHour: 23,\n    slotDuration: 5,\n    backgroundColor: '#f5f5f5',\n    onDataChange: null\n};\n\nDashGantt.propTypes = {\n    id: PropTypes.string,\n    rawData: PropTypes.arrayOf(\n        PropTypes.shape({\n            datetime: PropTypes.string.isRequired,\n            laakari: PropTypes.string.isRequired,\n            kesto_min: PropTypes.number.isRequired,\n            tyhja: PropTypes.number.isRequired\n        })\n    ),\n    date: PropTypes.string,\n    startHour: PropTypes.number,\n    endHour: PropTypes.number,\n    slotDuration: PropTypes.number,\n    backgroundColor: PropTypes.string,\n    onDataChange: PropTypes.func,\n    setProps: PropTypes.func\n};\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","tableRef","React","rawData","date","_DashGantt$transformD","transformData","Date","toISOString","split","professionals","timeslots","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","slotWidthCache","isDragging","dragSide","draggedSlot","originalSlot","dragPreview","dragType","handleSlotClick","bind","handleAddSlot","handleCreateSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","renderSlotRectangle","generateTimeCells","formatTime","timeToDecimal","calculateSlotWidth","getSlotWidth","updateRawData","handleDragStart","handleDrag","handleDragEnd","_inherits","key","value","_this$props","this","_DashGantt$transformD2","setState","slot","hour","minute","currentHover","_this$state","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","totalEndMinutes","endHour","endMinutes","endTime","slotToAdd","id","length","max","apply","_toConsumableArray","map","bookingProbability","isBooked","appointmentType","resource","updatedTimeslots","slotDuration","endTimeInMinutes","slotId","filter","_this$state2","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","Number","startDecimal","durationInMinutes","numCells","round","decimal","hours","minutes","probability","undefined","p","min","colorPalette","_this2","numCellsToSpan","slotStyle","position","top","left","height","width","boxSizing","backgroundColor","getProbabilityColor","color","borderRadius","display","justifyContent","alignItems","cursor","boxShadow","zIndex","transition","opacity","handleStyle","bottom","leftHandleStyle","rightHandleStyle","right","invisibleHandleStyle","leftInvisibleHandleStyle","rightInvisibleHandleStyle","style","onClick","e","stopPropagation","onMouseDown","target","currentTarget","onContextMenu","preventDefault","title","onMouseEnter","onMouseLeave","visibleHandle","previousSibling","error","console","professional","styles","_this3","_this$props2","_this$state3","slotsPerHour","cells","professionalSlots","slotsByStartTime","forEach","_slot$start$split$map2","isPreviewingForThisProfessional","slotBeingDragged","_loop","_loop2","cellContent","minuteIndex","timeKey","displayTimeKey","isHovered","timeDisplay","cellStyle","dashGanttTimeCell","cellTimeDecimal","isInPreviewRange","border","pointerEvents","fontSize","padding","push","cacheKey","nextProps","nextState","prevProps","_this4","_this$props3","onDataChange","setProps","updatedRawData","validTimeslots","Set","_this4$state$professi","doctorName","find","name","add","item","datetime","laakari","has","timeslot","_this4$state$professi2","originalData","durationMinutes","_timeslot$start$split2","startHours","_timeslot$end$split$m2","endHours","rowIndex","findIndex","row","kesto_min","tyhja","_timeslot$start$split4","_timeslot$end$split$m4","toimipiste","aikaryhman","aikaryhma","RESURSSI","specialty","ETNS_A","ETNS_B","type","initialMouseX","clientX","initialOffset","current","tableRect","getBoundingClientRect","slotStart","hoursPerDay","pixelsPerHour","document","addEventListener","relativeX","_this$state4","hoursFromStart","totalHours","snappedMinute","newTime","updatedSlot","duration","newEndDecimal","decimalToTime","endDecimal","newStartDecimal","_this$state5","removeEventListener","_this5","_this$props4","_this$state6","totalSlots","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","overflow","overflowX","dashGanttTable","borderCollapse","tableLayout","minWidth","dashGanttHeaderRow","dashGanttHeaderCell","textAlign","fontWeight","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","dashGanttProfessionalCell","verticalAlign","dashGanttSlot","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","ref","colSpan","generateHourHeaderCells","onChange","parseInt","disabled","filteredData","Array","from","doctor","idx","doctorToId","Object","fromEntries","_row$datetime$split2","time","_time$split$map2","startDate","setHours","endDate","getTime","getHours","getMinutes","prevState","_DashGantt$transformD3","Component","defaultProps","propTypes","PropTypes","isRequired"],"sourceRoot":""}