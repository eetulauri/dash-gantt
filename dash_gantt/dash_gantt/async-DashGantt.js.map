{"version":3,"file":"async-DashGantt.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashGantt.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * DashGantt is a Gantt chart component for scheduling.\n * It displays professionals vertically and time horizontally.\n * Users can add, modify, and remove timeslots for each professional.\n * The component outputs data that can be used in a prediction model.\n */\nexport default class DashGantt extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            },\n            hoveredCell: null,\n            // Cache for slot width calculations to avoid repeated calculations\n            slotWidthCache: {}\n        };\n        \n        // Bind methods\n        this.handleSlotClick = this.handleSlotClick.bind(this);\n        this.handleAddSlot = this.handleAddSlot.bind(this);\n        this.handleCreateSlot = this.handleCreateSlot.bind(this);\n        this.handleRemoveSlot = this.handleRemoveSlot.bind(this);\n        this.handleSaveSlot = this.handleSaveSlot.bind(this);\n        this.handleCancelEdit = this.handleCancelEdit.bind(this);\n        this.handleCellHover = this.handleCellHover.bind(this);\n        this.handleCellLeave = this.handleCellLeave.bind(this);\n        this.renderSlotRectangle = this.renderSlotRectangle.bind(this);\n        this.generateTimeCells = this.generateTimeCells.bind(this);\n        this.formatTime = this.formatTime.bind(this);\n        this.timeToDecimal = this.timeToDecimal.bind(this);\n        this.calculateSlotWidth = this.calculateSlotWidth.bind(this);\n        this.getSlotWidth = this.getSlotWidth.bind(this);\n    }\n    \n    // Handle clicking on a timeslot\n    handleSlotClick(slot) {\n        this.setState({\n            selectedSlot: slot,\n            isAddingSlot: false\n        });\n    }\n    \n    // Handle cell hover\n    handleCellHover(professionalId, hour, minute) {\n        // Avoid unnecessary state updates if hovering over the same cell\n        const currentHover = this.state.hoveredCell;\n        if (currentHover && \n            currentHover.professionalId === professionalId && \n            currentHover.hour === hour && \n            currentHover.minute === minute) {\n            return; // No change needed\n        }\n        \n        // Update the hover state\n        this.setState({\n            hoveredCell: { professionalId, hour, minute }\n        });\n    }\n    \n    // Handle cell leave\n    handleCellLeave() {\n        // Only update state if we're currently hovering over a cell\n        if (this.state.hoveredCell !== null) {\n            this.setState({\n                hoveredCell: null\n            });\n        }\n    }\n    \n    // Handle creating a new timeslot with a single click\n    handleCreateSlot(professionalId, hour, minute) {\n        const { timeslots, date, setProps } = this.props;\n        \n        // Calculate start and end times\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        // Always create a 20-minute slot regardless of slotDuration prop\n        const slotDurationMinutes = 20; // Fixed 20-minute duration for created slots\n        \n        // Calculate end time, ensuring exact 20-minute duration\n        // We use integer math to avoid floating-point precision issues\n        const totalStartMinutes = (startHour * 60) + startMinutes;\n        const totalEndMinutes = totalStartMinutes + slotDurationMinutes;\n        const endHour = Math.floor(totalEndMinutes / 60);\n        const endMinutes = totalEndMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        // Create new slot\n        const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n        const slotToAdd = {\n            id: newId,\n            professionalId: professionalId,\n            start: startTime,\n            end: endTime,\n            date: date,\n            bookingProbability: 0.5 // Default probability, can be updated later by prediction model\n        };\n        \n        // Update timeslots\n        const updatedTimeslots = [...timeslots, slotToAdd];\n        setProps({ timeslots: updatedTimeslots });\n    }\n    \n    // Handle adding a new timeslot\n    handleAddSlot(professionalId, hour, minute) {\n        const { slotDuration } = this.props;\n        const startHour = Math.floor(hour);\n        const startMinutes = minute;\n        const startTime = `${startHour.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;\n        \n        const endTimeInMinutes = startHour * 60 + startMinutes + slotDuration;\n        const endHour = Math.floor(endTimeInMinutes / 60);\n        const endMinutes = endTimeInMinutes % 60;\n        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;\n        \n        this.setState({\n            isAddingSlot: true,\n            selectedSlot: null,\n            newSlot: {\n                professionalId,\n                start: startTime,\n                end: endTime\n            }\n        });\n    }\n    \n    // Handle removing a timeslot\n    handleRemoveSlot(slotId) {\n        const { timeslots, setProps } = this.props;\n        const updatedTimeslots = timeslots.filter(slot => slot.id !== slotId);\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({ selectedSlot: null });\n    }\n    \n    // Handle saving a timeslot (new or edited)\n    handleSaveSlot() {\n        const { timeslots, date, setProps } = this.props;\n        const { selectedSlot, newSlot, isAddingSlot } = this.state;\n        \n        let updatedTimeslots;\n        \n        if (isAddingSlot) {\n            // Add new slot\n            const newId = timeslots.length > 0 ? Math.max(...timeslots.map(slot => slot.id)) + 1 : 1;\n            const slotToAdd = {\n                id: newId,\n                professionalId: newSlot.professionalId,\n                start: newSlot.start,\n                end: newSlot.end,\n                date: date\n            };\n            \n            updatedTimeslots = [...timeslots, slotToAdd];\n        } else {\n            // Update existing slot\n            updatedTimeslots = timeslots.map(slot => \n                slot.id === selectedSlot.id ? { ...slot, ...selectedSlot } : slot\n            );\n        }\n        \n        setProps({ timeslots: updatedTimeslots });\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Handle canceling edit or add operation\n    handleCancelEdit() {\n        this.setState({\n            selectedSlot: null,\n            isAddingSlot: false,\n            newSlot: {\n                professionalId: null,\n                start: null,\n                end: null\n            }\n        });\n    }\n    \n    // Convert time string to decimal hours\n    timeToDecimal(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours + (minutes / 60);\n    }\n    \n    // Calculate the width of a slot that should span multiple cells\n    calculateSlotWidth(start, end, slotDuration) {\n        // Calculate duration in minutes\n        const startDecimal = this.timeToDecimal(start);\n        const endDecimal = this.timeToDecimal(end);\n        const durationInHours = endDecimal - startDecimal;\n        const durationInMinutes = durationInHours * 60;\n        \n        // Calculate how many grid cells this should span\n        // To avoid floating-point precision issues, round to the nearest integer\n        // For a 20-minute duration with 5-minute slots, this should consistently give 4 cells\n        const numCells = Math.round(durationInMinutes / slotDuration);\n        \n        // Log the calculation only in development mode to reduce console noise\n        if (process.env.NODE_ENV === 'development') {\n            console.log(`Slot ${start}-${end}: Duration=${durationInMinutes}min, Spans ${numCells} cells`);\n        }\n        \n        // Return the exact number of cells to span (minimum 1)\n        return Math.max(1, numCells);\n    }\n    \n    // Format decimal hours to time string\n    decimalToTime(decimal) {\n        const hours = Math.floor(decimal);\n        const minutes = Math.round((decimal - hours) * 60);\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    // Get color based on booking probability using a continuous gradient\n    getProbabilityColor(probability) {\n        if (probability === undefined) return '#4CAF50'; // Default green\n        \n        // Clamp probability between 0 and 1 for safety\n        const p = Math.max(0, Math.min(1, probability));\n        \n        // RGB values for red (low probability) to green (high probability)\n        // Red component: decreases as probability increases\n        const r = Math.round(255 * (1 - p));\n        \n        // Green component: increases as probability increases\n        const g = Math.round(255 * p);\n        \n        // Blue component: keep low for red-to-green spectrum\n        const b = 0;\n        \n        // Convert to hex color\n        return `rgb(${r}, ${g}, ${b})`;\n    }\n    \n    // Render a single slot rectangle\n    renderSlotRectangle(slot) {\n        const { slotDuration } = this.props;\n        \n        // Get the number of cells this slot should span (using cached value if available)\n        const numCellsToSpan = this.getSlotWidth(slot, slotDuration);\n        \n        // We need to make the rectangle fill exactly the grid cells it should span\n        // Calculate width to exactly fill the grid cells\n        const slotStyle = {\n            position: 'absolute',\n            top: '4px',\n            left: '0',\n            height: 'calc(100% - 8px)',\n            // For a consistent calculation that accounts for grid lines:\n            // - Multiply by 100% to get the percentage width\n            // - Add (numCells-1) pixels to account for the internal borders\n            width: `calc(${numCellsToSpan * 100}% + ${numCellsToSpan - 1}px)`,\n            // Set box-sizing to border-box to include borders in element's dimensions\n            boxSizing: 'border-box',\n            backgroundColor: this.getProbabilityColor(slot.bookingProbability),\n            color: 'white',\n            borderRadius: '3px', // Slightly less rounded for cleaner look\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            cursor: 'pointer',\n            boxShadow: '0 1px 2px rgba(0,0,0,0.1)', // Lighter shadow for simple_white theme\n            zIndex: 100,\n            transition: 'all 0.15s ease-in-out'\n        };\n        \n        const probabilityStyle = {\n            fontSize: '14px',\n            fontWeight: '500', // Medium weight for cleaner look\n            textShadow: '0 1px 1px rgba(0,0,0,0.2)' // Subtle text shadow for legibility\n        };\n        \n        return (\n            <div \n                key={`slot-${slot.id}`} \n                style={slotStyle}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    this.handleSlotClick(slot);\n                }}\n                title={`Time slot: ${slot.start} - ${slot.end} (Booking probability: ${Math.round(slot.bookingProbability * 100)}%)`}\n            >\n                {slot.bookingProbability !== undefined && (\n                    <div style={probabilityStyle}>\n                        {Math.round(slot.bookingProbability * 100)}%\n                    </div>\n                )}\n            </div>\n        );\n    }\n    \n    // Format time for display (HH:MM)\n    formatTime(hour, minute) {\n        return `${Math.floor(hour).toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n    }\n    \n    // Generate time cells for each hour and minute interval\n    generateTimeCells(professional, styles) {\n        const { timeslots, startHour, endHour, slotDuration } = this.props;\n        const slotsPerHour = 60 / slotDuration;\n        const cells = [];\n        \n        // Only filter slots for this professional once\n        const professionalSlots = timeslots.filter(slot => slot.professionalId === professional.id);\n        \n        // Group slots by their start time for more efficient lookup\n        const slotsByStartTime = {};\n        professionalSlots.forEach(slot => {\n            const [hour, minute] = slot.start.split(':').map(Number);\n            const key = `${hour}:${minute}`;\n            slotsByStartTime[key] = slot;\n        });\n        \n        // Pre-create styles for hover state to reduce object creation during render\n        const hoverStyle = {\n            position: 'absolute',\n            bottom: '2px',\n            right: '2px',\n            fontSize: '10px',\n            color: '#666',\n            pointerEvents: 'none',\n            backgroundColor: 'rgba(255, 255, 255, 0.7)',\n            padding: '1px 3px',\n            borderRadius: '2px',\n            zIndex: 200\n        };\n        \n        // Iterate through each time slot for this professional\n        for (let hour = startHour; hour <= endHour; hour++) {\n            for (let minuteIndex = 0; minuteIndex < slotsPerHour; minuteIndex++) {\n                const minute = minuteIndex * slotDuration;\n                const timeKey = `${hour}:${minute}`;\n                const displayTimeKey = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                \n                // Check if this cell is the start of a time slot\n                const slot = slotsByStartTime[timeKey];\n                \n                const isHovered = this.state.hoveredCell && \n                                this.state.hoveredCell.professionalId === professional.id && \n                                this.state.hoveredCell.hour === hour &&\n                                this.state.hoveredCell.minute === minute;\n                \n                // Format time for display in the hover tooltip\n                const timeDisplay = this.formatTime(hour, minute);\n                \n                // Create a consistent cell style with proper borders\n                // Hour borders are thicker for better visual separation\n                const cellStyle = {\n                    ...styles.dashGanttTimeCell,\n                    backgroundColor: isHovered ? '#fafafa' : 'transparent',\n                    borderLeft: minute === 0 ? '1px solid #eaeaea' : 'none',  // Only show left border at hour boundaries\n                    position: 'relative'\n                };\n                \n                // Create the cell for this time slot\n                const cell = (\n                    <td \n                        key={`cell-${professional.id}-${displayTimeKey}`} \n                        style={cellStyle}\n                        onClick={() => this.handleCreateSlot(professional.id, hour, minute)}\n                        onMouseEnter={() => this.handleCellHover(professional.id, hour, minute)}\n                        onMouseLeave={this.handleCellLeave}\n                        title={`Time: ${timeDisplay}`}\n                    >\n                        {slot && this.renderSlotRectangle(slot)}\n                        \n                        {/* Show time on hover */}\n                        {isHovered && (\n                            <div style={{\n                                position: 'absolute', \n                                bottom: '2px', \n                                right: '2px', \n                                fontSize: '10px', \n                                color: '#666', \n                                pointerEvents: 'none',\n                                backgroundColor: 'rgba(255, 255, 255, 0.8)', \n                                padding: '1px 3px', \n                                borderRadius: '2px', \n                                zIndex: 200,\n                                border: '1px solid #eaeaea'\n                            }}>\n                                {timeDisplay}\n                            </div>\n                        )}\n                    </td>\n                );\n                \n                cells.push(cell);\n            }\n        }\n        \n        return cells;\n    }\n    \n    // Get cached slot width or calculate it if not in cache\n    getSlotWidth(slot, slotDuration) {\n        // Create a unique key for this slot and duration\n        const cacheKey = `${slot.id}_${slot.start}_${slot.end}_${slotDuration}`;\n        \n        // If we have a cached value, use it\n        if (this.state.slotWidthCache[cacheKey] !== undefined) {\n            return this.state.slotWidthCache[cacheKey];\n        }\n        \n        // Otherwise, calculate and cache the value\n        const width = this.calculateSlotWidth(slot.start, slot.end, slotDuration);\n        \n        // Update the cache (without triggering a re-render)\n        // We can safely update state directly here since we're not using setState\n        // and this won't trigger a re-render - it's just for caching\n        this.state.slotWidthCache[cacheKey] = width;\n        \n        return width;\n    }\n    \n    // Optimize rendering by preventing unnecessary re-renders\n    shouldComponentUpdate(nextProps, nextState) {\n        // We need to allow hover state changes to trigger re-renders for hover effects\n        // but we can still optimize by not recalculating slot widths\n        \n        // For any state or prop changes, we should re-render\n        // But we can optimize calculations inside the render cycle\n        return true;\n    }\n    \n    // Reset cache when props change\n    componentDidUpdate(prevProps) {\n        // If timeslots change, clear the width cache to ensure correct calculations\n        if (prevProps.timeslots !== this.props.timeslots || \n            prevProps.slotDuration !== this.props.slotDuration) {\n            this.setState({\n                slotWidthCache: {}\n            });\n        }\n    }\n    \n    render() {\n        const { id, professionals, date, timeslots, startHour, endHour, slotDuration } = this.props;\n        \n        // Calculate number of time slots per hour (e.g., 3 for 20-minute slots)\n        const slotsPerHour = 60 / slotDuration;\n        \n        // Calculate total number of slots in the timeline\n        const totalSlots = (endHour - startHour) * slotsPerHour;\n        \n        const styles = {\n            dashGantt: {\n                fontFamily: 'Arial, sans-serif',\n                margin: '20px 0'\n            },\n            dashGanttHeader: {\n                marginBottom: '10px'\n            },\n            dashGanttContainer: {\n                border: '1px solid #e0e0e0', // Even lighter border for simple_white theme\n                borderRadius: '4px', // Less rounded corners for clean look\n                overflow: 'hidden',\n                overflowX: 'auto',\n                boxShadow: 'none' // No shadow for minimalist look\n            },\n            dashGanttTable: {\n                width: '100%',\n                borderCollapse: 'collapse',\n                tableLayout: 'fixed'\n            },\n            dashGanttHeaderRow: {\n                backgroundColor: this.props.backgroundColor || '#ffffff' // White background like simple_white theme\n            },\n            dashGanttHeaderCell: {\n                padding: '12px 8px', \n                textAlign: 'center',\n                fontWeight: '500', // Medium weight for cleaner look\n                borderRight: '1px solid #eaeaea', // Very light border\n                borderBottom: '1px solid #eaeaea',\n                fontSize: '14px',\n                color: '#444' // Darker text for better readability\n            },\n            dashGanttFirstHeaderCell: {\n                width: '150px',\n                borderRight: '1px solid #eaeaea',\n                borderBottom: '1px solid #eaeaea'\n            },\n            dashGanttRow: {\n                height: '60px'\n            },\n            dashGanttProfessionalCell: {\n                width: '150px',\n                padding: '8px',\n                borderRight: '1px solid #eaeaea',\n                borderBottom: '1px solid #eaeaea',\n                backgroundColor: this.props.backgroundColor || '#ffffff', // Use same background color as headers\n                verticalAlign: 'middle',\n                fontWeight: '500',\n                fontSize: '14px',\n                color: '#444'\n            },\n            dashGanttTimeCell: {\n                position: 'relative',\n                padding: '0',\n                borderRight: '1px solid #f5f5f5', // Very subtle grid lines\n                borderBottom: '1px solid #eaeaea',\n                cursor: 'pointer',\n                height: '60px',\n                width: `${100 / totalSlots}%`,\n                boxSizing: 'border-box',\n                transition: 'background-color 0.2s ease'\n            },\n            dashGanttSlot: {\n                position: 'absolute',\n                top: '0',\n                height: '100%',\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                borderRadius: '4px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: 'pointer',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)', // Lighter shadow for cleaner look\n                zIndex: 10,\n                overflow: 'hidden'\n            },\n            dashGanttProbability: {\n                fontSize: '14px',\n                fontWeight: '500'\n            },\n            dashGanttEditor: {\n                marginTop: '20px',\n                padding: '15px',\n                border: '1px solid #eaeaea', // Lighter border for simple_white\n                borderRadius: '4px',\n                backgroundColor: '#ffffff' // Pure white background\n            },\n            dashGanttForm: {\n                display: 'flex',\n                flexDirection: 'column',\n                gap: '10px'\n            },\n            dashGanttFormGroup: {\n                display: 'flex',\n                alignItems: 'center'\n            },\n            dashGanttFormGroupLabel: {\n                width: '100px',\n                marginRight: '10px',\n                color: '#444',\n                fontSize: '14px'\n            },\n            dashGanttFormGroupInput: {\n                flex: 1,\n                padding: '8px',\n                border: '1px solid #eaeaea',\n                borderRadius: '4px',\n                fontSize: '14px'\n            },\n            dashGanttFormActions: {\n                display: 'flex',\n                gap: '10px',\n                marginTop: '10px'\n            },\n            dashGanttFormActionsButton: {\n                padding: '8px 15px',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontWeight: '500',\n                fontSize: '14px'\n            },\n            dashGanttFormActionsSave: {\n                backgroundColor: '#2196F3', // Using blue for primary action\n                color: 'white'\n            },\n            dashGanttFormActionsCancel: {\n                backgroundColor: '#f5f5f5',\n                color: '#333'\n            },\n            dashGanttFormActionsRemove: {\n                backgroundColor: '#f44336',\n                color: 'white'\n            }\n        };\n        \n        // Generate hour labels\n        const hourLabels = [];\n        for (let hour = startHour; hour <= endHour; hour++) {\n            const displayHour = hour % 24; // Handle 24-hour format\n            const isPM = displayHour >= 12;\n            const display12Hour = displayHour === 0 ? 12 : (displayHour > 12 ? displayHour - 12 : displayHour);\n            const timeLabel = `${display12Hour}${isPM ? 'PM' : 'AM'}`;\n            hourLabels.push(timeLabel);\n        }\n        \n        // Generate hour header cells\n        const generateHourHeaderCells = () => {\n            const cells = [];\n            \n            for (let hour = startHour; hour <= endHour; hour++) {\n                // Use 24-hour format (European style)\n                // Ensure we're not exceeding 24 hours (handle edge case for endHour=24)\n                const displayHour = hour === 24 ? 24 : hour % 24;\n                // Format as 2-digit hour (e.g., \"06\" instead of \"6\")\n                const timeLabel = `${displayHour.toString().padStart(2, '0')}:00`;\n                \n                cells.push(\n                    <th \n                        key={`header-${hour}`} \n                        colSpan={slotsPerHour}\n                        style={styles.dashGanttHeaderCell}\n                    >\n                        {timeLabel}\n                    </th>\n                );\n            }\n            \n            return cells;\n        };\n\n        return (\n            <div id={id} style={styles.dashGantt}>\n                <div style={styles.dashGanttHeader}>\n                    <h2>Schedule for {date}</h2>\n                </div>\n                <div style={styles.dashGanttContainer}>\n                    <table style={styles.dashGanttTable}>\n                        <thead>\n                            <tr style={styles.dashGanttHeaderRow}>\n                                <th style={styles.dashGanttFirstHeaderCell}></th>\n                                {generateHourHeaderCells()}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {professionals.map(professional => (\n                                <tr key={`row-${professional.id}`} style={styles.dashGanttRow}>\n                                    <td style={styles.dashGanttProfessionalCell}>\n                                        {professional.name}\n                                    </td>\n                                    {this.generateTimeCells(professional, styles)}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                \n                {/* Render slot editor */}\n                {this.state.selectedSlot || this.state.isAddingSlot ? (\n                    <div style={styles.dashGanttEditor}>\n                        <h3>{this.state.isAddingSlot ? 'Add New Slot' : 'Edit Slot'}</h3>\n                        <div style={styles.dashGanttForm}>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Professional:</label>\n                                <select \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.professionalId : this.state.selectedSlot.professionalId} \n                                    onChange={e => {\n                                        const professionalId = parseInt(e.target.value);\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, professionalId } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, professionalId } });\n                                        }\n                                    }}\n                                    disabled={!this.state.isAddingSlot}\n                                >\n                                    {professionals.map(p => (\n                                        <option key={p.id} value={p.id}>{p.name}</option>\n                                    ))}\n                                </select>\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>Start Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.start : this.state.selectedSlot.start} \n                                    onChange={e => {\n                                        const start = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, start } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, start } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormGroup}>\n                                <label style={styles.dashGanttFormGroupLabel}>End Time:</label>\n                                <input \n                                    type=\"time\" \n                                    style={styles.dashGanttFormGroupInput}\n                                    value={this.state.isAddingSlot ? this.state.newSlot.end : this.state.selectedSlot.end} \n                                    onChange={e => {\n                                        const end = e.target.value;\n                                        if (this.state.isAddingSlot) {\n                                            this.setState({ newSlot: { ...this.state.newSlot, end } });\n                                        } else {\n                                            this.setState({ selectedSlot: { ...this.state.selectedSlot, end } });\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.dashGanttFormActions}>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsSave}}\n                                    onClick={this.handleSaveSlot}\n                                >\n                                    Save\n                                </button>\n                                <button \n                                    style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsCancel}}\n                                    onClick={this.handleCancelEdit}\n                                >\n                                    Cancel\n                                </button>\n                                {!this.state.isAddingSlot && (\n                                    <button \n                                        style={{...styles.dashGanttFormActionsButton, ...styles.dashGanttFormActionsRemove}}\n                                        onClick={() => this.handleRemoveSlot(this.state.selectedSlot.id)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nDashGantt.defaultProps = {\n    timeslots: [],\n    date: new Date().toISOString().split('T')[0], // Today's date in YYYY-MM-DD format\n    startHour: 6, // 6:00 AM\n    endHour: 24, // Midnight\n    slotDuration: 20, // 20 minutes\n    backgroundColor: '#f5f5f5' // Default background color\n};\n\nDashGantt.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of professionals to display in the Gantt chart.\n     * Each professional should have an id and name.\n     */\n    professionals: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n\n    /**\n     * List of timeslots to display in the Gantt chart.\n     * Each timeslot should have an id, professionalId, start time, end time, and date.\n     */\n    timeslots: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            professionalId: PropTypes.number.isRequired,\n            start: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            end: PropTypes.string.isRequired, // Format: \"HH:MM\"\n            date: PropTypes.string.isRequired, // Format: \"YYYY-MM-DD\"\n            bookingProbability: PropTypes.number // Optional: probability of booking (0-1)\n        })\n    ),\n\n    /**\n     * The date to display in the Gantt chart (YYYY-MM-DD).\n     */\n    date: PropTypes.string,\n\n    /**\n     * The start hour of the day (e.g., 6 for 6:00 AM).\n     */\n    startHour: PropTypes.number,\n\n    /**\n     * The end hour of the day (e.g., 24 for midnight).\n     */\n    endHour: PropTypes.number,\n\n    /**\n     * The duration of each slot in minutes.\n     */\n    slotDuration: PropTypes.number,\n\n    /**\n     * The background color for the header row.\n     */\n    backgroundColor: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"names":["DashGantt","_Component","props","_this","_classCallCheck","_callSuper","state","selectedSlot","isAddingSlot","newSlot","professionalId","start","end","hoveredCell","slotWidthCache","handleSlotClick","bind","handleAddSlot","handleCreateSlot","handleRemoveSlot","handleSaveSlot","handleCancelEdit","handleCellHover","handleCellLeave","renderSlotRectangle","generateTimeCells","formatTime","timeToDecimal","calculateSlotWidth","getSlotWidth","_inherits","key","value","slot","this","setState","hour","minute","currentHover","_this$props","timeslots","date","setProps","startHour","Math","floor","startMinutes","startTime","concat","toString","padStart","totalEndMinutes","endHour","endMinutes","endTime","slotToAdd","id","length","max","apply","_toConsumableArray","map","bookingProbability","slotDuration","endTimeInMinutes","slotId","_this$props2","filter","updatedTimeslots","_this$props3","_this$state","_objectSpread","timeStr","_timeStr$split$map2","_slicedToArray","split","Number","startDecimal","durationInMinutes","numCells","round","decimal","hours","minutes","probability","undefined","p","min","r","g","_this2","numCellsToSpan","slotStyle","position","top","left","height","width","boxSizing","backgroundColor","getProbabilityColor","color","borderRadius","display","justifyContent","alignItems","cursor","boxShadow","zIndex","transition","React","style","onClick","e","stopPropagation","title","fontSize","fontWeight","textShadow","professional","styles","_this3","_this$props4","slotsPerHour","cells","professionalSlots","slotsByStartTime","forEach","_slot$start$split$map2","_loop","_loop2","minuteIndex","timeKey","displayTimeKey","isHovered","timeDisplay","cellStyle","dashGanttTimeCell","borderLeft","cell","onMouseEnter","onMouseLeave","bottom","right","pointerEvents","padding","border","push","cacheKey","nextProps","nextState","prevProps","_this4","_this$props5","professionals","totalSlots","dashGantt","fontFamily","margin","dashGanttHeader","marginBottom","dashGanttContainer","overflow","overflowX","dashGanttTable","borderCollapse","tableLayout","dashGanttHeaderRow","dashGanttHeaderCell","textAlign","borderRight","borderBottom","dashGanttFirstHeaderCell","dashGanttRow","dashGanttProfessionalCell","verticalAlign","dashGanttSlot","dashGanttProbability","dashGanttEditor","marginTop","dashGanttForm","flexDirection","gap","dashGanttFormGroup","dashGanttFormGroupLabel","marginRight","dashGanttFormGroupInput","flex","dashGanttFormActions","dashGanttFormActionsButton","dashGanttFormActionsSave","dashGanttFormActionsCancel","dashGanttFormActionsRemove","hourLabels","displayHour","isPM","timeLabel","colSpan","generateHourHeaderCells","name","onChange","parseInt","target","disabled","type","Component","defaultProps","Date","toISOString","propTypes","PropTypes","isRequired"],"sourceRoot":""}